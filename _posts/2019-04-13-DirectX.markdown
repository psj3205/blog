---
layout: post
title:  "DirectX 정리"
date:   2019-04-13 11:38:02 +0900
---

### 1. 벡터 대수
* 1.1 벡터(vector, 방향량)
	- **크기와 방향**을 모두 가진 수량(quantity)을 가리키는 말
	- 예: 힘(특정한 방향+세기), 변위(한 입자의 최종적인 이동방향+거리), 속도(빠르기+방향)
	- 두 벡터가 길이가 같고 같은 방향을 가리키면 동일한 벡터
	- 벡터는 위치와는 무관

	- 1.1.1 벡터와 좌표계
		1. 컴퓨터는 벡터를 기하학적으로 처리하지 못함
		2. 벡터를 수치적으로 지정하는 방법이 필요
		3. 공간에 하나의 3차원 좌표계를 도입하고 **모든 벡터의 꼬리가 좌표계의 원점과 일치하도록 이동하여 표현**
		4. 그 결과 벡터의 **끝점이 가리키는 좌표**로 각 벡터를 나타낼 수 있음 v = (x, y, z) 표기 가능
		5. 3차원 벡터를 컴퓨터 프로그램 안에서 부동소수점(float 또는 double) 값 세개로 표현 가능
		6. 같은 벡터라도 기준 좌표계가 다르면 좌표 표현이 달라짐

	- 1.1.2 왼손잡이 좌표계 대 오른손잡이 좌표계
		1. Direct3D는 왼손잡이 좌표계 사용
	
	- 1.1.3 기본적인 벡터 연산들
		1. 두 벡터는 만일 대응되는 좌표성분이 상등이면, 그리고 오직 그럴 때만 상등이다.
		2. 벡터 덧셈은 성분별로 이루어진다. 따라서 **벡터 덧셈은 같은 차원의 벡터끼리만 가능**하다.
		3. 벡터에 스칼라를 곱할 수 있다. 그 결과는 벡터이다. 
		4. 벡터의 뺄샘은 벡터 덧셈과 스칼라 곱셈을 통해서 정의된다. u - v = u + (-1*v) = u + (-v) = (ux - vx, uy - vy, uz - vz)

* 1.2 길이와 단위벡터
	- 기하학적으로 한 벡터의 크기는 해당 지향 선분의 길이
	- 3차원 벡터의 크기는 피타고라스의 정리를 두 번 적용하여 구할 수 있음
	- 벡터를 오로지 방향을 나타내는 용도로만 사용하는 경우에는 벡터의 길이가 중요하지 않음
	- 따라서 길이가 1인 벡터를 사용하고 명칭은 **단위백터(unit vector)**라고 부름

* 1.3 내적
	- 내적(inner product)은 **스칼라값을 구하는 벡터 곱셈의 일종**
	- **u • v = uxvx + uyvy + uzvz** 로 정의
	- 내적은 대응되는 성분끼리 곱의 합
	- 내적의 기하학적 의미 **u • v = ||u||||v||cosΘ**
	- u • v = 0 이면 두 벡터는 직교
	- u • v > 0 이면 두 벡터 사이의 각도 Θ는 90도보다 작다
	- u • v < 0 이면 두 벡터 사이의 각도 Θ는 90도보다 크다
	- u, v 모두 단위벡터일 경우 u • v는 두 벡터 사이의 코사인 값이다.

	- 1.3.1 직교화
		1. 벡터 집합 {v0, ...., vn-1}의 모든 벡터가 단위 길이이고 서로 직교일 때, 그러한 벡터 집합을 **정규직교(orthonormal)집합**이라 함
		2. 벡터 집합을 정규직교벡터 집합으로 만드는 것을 **직교화(orthogonalization)**이라 함
		3. **그램-슈미트 직교화** 과정을 통해 직교화한다.

* 1.4 외적
	- 또 다른 벡터 곱셈으로 **외적(outer product)**가 있음
	- 외적의 **결과는 벡터**
	- 외적은 오직 3차원 벡터에 대해서만 정의됨
	- 두 3차원 벡터 u와 v의 외적을 취하면 **u와 v 모두에 직교인 또 다른 벡터 w가 나옴**
	- w = u x v = (uyvz - uzvy, uzvx - uxvz, uxvy - uyvx)로 정의
	- u x v 와 v x u 의 결과값은 다르다(**교환법칙 성립 안함**)
	
	- 1.4.1 2차원 유사 외적
		1. 2차원에서는 두 벡터에 수직인 벡터가 존재하지 않음
		2. 그러나 하나의 2차원 벡터 u = (ux, uy)에 수직인 벡터 v는 구할 수 있음
		3. 이 것을 **2차원 유사 외적(pseudo 2D cross product)**라고 함
		4. v = (-uy, ux)가 u에 수직인 벡터, v' = -v = (uy, -ux)로 수직인 벡터임
		5. u • v = (ux, uy)•(-uy, ux) = -uxuy + uyux = 0

	- 1.4.2 외적을 이용한 직교화
		1. 3차원의 경우 정규직교에 아주 가깝지만 수치 정밀도 오차의 누적 때문에 완전한 정규직교는 아닌 벡터집합 {v0, v1, v2}를 직교화하는 또 다른 공정이 존재
		2. 

* 1.5 점
	- 벡터는 위치를 서술하지 않음
	- 그러나 3차원 그래픽 프로그램에서는 공간 안의 어떤 위치를 지정할 수 있어야 한다.
	- 특정 좌표계를 기준으로 표준 위치에 있는 벡터를 3차원 공간 안의 한 위치를 나타내는 데 사용할 수 있다.
	- 이러한 벡터를 **위치벡터**라고 한다
	- 위치벡터만으로 하나의 점을 규정하는 데 충분하므로, 위치벡터와 점을 같은 의미로 사용
	- 점을 벡터로 표현하는(특히 코드 안에서) 방식의 한 가지 부작용은, 점에 대해서는 의미가 없는 벡터 연산을 점에 적용하는 실수를 저지를 여지가 생긴다.

---

### 2. 행렬 대수
* 2.1 정의
	- m x n 행렬 M은 m개의 행과 n개의 열로 이루어진 실수들의 정사각 배열
	- 행렬의 차원 : 행의 개수와 열의 개수의 곱
	- 행렬의 원소 : 행렬을 구성하는 수
	- 두 행렬은 오직 대응되는 성분들이 상등일 때만 상등이다.
	- 두 행렬을 더할 때는 대응되는 성분들을 더한다. 따라서 차원이 같은 행렬들만 더할 수 있다.
	- 행렬에 하나의 스칼라를 곱할 때에는 행렬의 모든 성분에 그 스칼라를 곱한다.
	- 행렬의 뺄셈은 스칼라 곱셈과 행렬 덧셈으로 정의한다. 즉, A - B = A + (-1*B) = A + (-B)
	- A + B = B + A  			 덧셈의 교환법칙
	- (A + B) + C = A + (B + C)  덧셈의 결합법칙
	- r(A + B) = rA + rB		 행렬들에 대한 스칼라의 분배법칙
	- (r + s)A = rA + sA		 스칼라들에 대한 행렬의 분배법칙

* 2.2 행렬 곱셈
	- 2.2.1 정의
		1. A가 m x n 행렬이고 B가 n x p 행렬이면 둘의 곱 AB가 정의
		2. 두 행렬의 곱 C는 m x p 행렬
		3. C의 ij번째 성분은 A의 i번째 행벡터와 B의 j번째 열벡터의 내적이다.
		4. 따라서 행렬 곱이 정의되기 위해서는 A의 열 수와 B의 행 수가 같아야 한다.

	- 2.2.2 벡터와 행렬의 곱셈
		1. 선형결합(일차결합) : 벡터*행렬 곱 uA가 행렬 A의 행벡터들과 벡터 u로 주어진 스칼라 계수 x,y,z의 선형결합에 해당됨



