---
layout: post
title:  "Git 정리"
date:   2018-09-21 17:15:32 +0900
---

### 1. 수업 소개

* Version Control Systems
  - Version Management, not by changing the file name(파일의 이름을 바꾸지 않고 버전관리)
  - Backup, Recorvery, Collaboration
  - Version Control Systems의 종류 : CVS, SVN, GIT

* 왜 Git을 사용하지?
  - Git은 정말 복잡하다.
  - 그럼 도대체 왜 Git을 쓰나?
  - 현실은 Git보다 지옥같다.
  - **버전관리 하지 않고 코드를 관리하는 것이 더 힘들다. 현실의 복잡성이 더 크다.**

---


### 2. 저장소 만들기

  - **git init** : 현재 위치한 디렉토리에 git 저장소를 생성
  - **.git** 디렉토리에 버전 관련 정보가 들어있다.

---


### 3. git이 관리할 대상으로 파일 등록

  - git 저장소에 파일이 추가되더라도 별도로 추적하지 않으면 해당 파일의 버전관리를 하지 않는다.
  - 따라서 **git add** 명령어로 git이 파일을 추적하도록 명령해야 한다.
  - **git add f1.txt** : f1.txt를 stage area에 올린다.
  - **git status** : 저장소의 상태 확인

---


### 4. 버전 만들기(commit)

  - 최초로 추적할 때도 **git add** 명령어를 사용하지만 파일이 수정될 때도 **git add** 명령어를 사용한다.
  - **git add** 하면 stage area에 올라가서 commit 대기 상태가 된다.
  - **git commit** 하면 stage area에서 repository에 이동하여 저장된다.

---


### 5. 변경사항 확인하기

* git의 장점
  - 과거의 어느 시점의 소스를 확인 가능
  - 과거의 소스로 돌아갈 수 있다.
  - **git log** : 로그 확인 명령어
  - **git log -p** : 로그 상세 확인 명령어
  - **git diff** : commit 간의 차이 확인 명령어

---


### 6. 과거의 버전으로 돌아가기(commit 취소)

  - **git reset [해당 commit id] --hard** : 해당 commit까지로 이동 (reset은 공유작업하는 source에서는 절대 하면 안된다.)
      * reset한다고 해도 소스가 완전히 삭제된 것은 아니다. 다시 되돌릴 수 있다.
  - **git revert [해당 commit id]** : commit을 취소한 내용을 새로운 버전으로 만드는 명령어

---


### 7. 메뉴얼 보는 방법

    - **git commit --help**

---


### 9. git의 혁신 - branch
    - branch : 작업을 분기한다.

 ---


### 10. branch 만들기
   - **git branch** : branch 목록 확인
   - **git branch [만들고자 하는 branch명]** : 새로운 branch 생성
   - **git checkout [변경하고자 하는 branch명]** : branch 변경

 ---


### 11. branch 정보확인
   - **git log --branches --decorate** : 모든 branch의 log 확인
   - **git log --branches --graph** : 가지 모양의 그래프로 모든 branch의 log 확인
   - **git log --branches --graph --decorate --oneline** : 가지 모양의 그래프로 모든 branch의 log를 한줄로 확인
   - **git log [branch1]..[branch2]** : branch간의 비교
   - **git diff [branch1]..[branch2]** : branch간의 코드비교

 ---


### 12. branch 병합
   - A branch로 B branch를 병합할 경우
     - **git checkout A** : 합쳐지는 branch인 A branch로 변경
     - **git merge B** : B branch를 A에 병합
     - 병합하고자 하는 branch가 선택된 상태에서 병합되는 branch를 병합한다.
   - **git branch -d [삭제하고자 하는 branch]** : branch 삭제

 ---


### 13. branch 병합 시 충돌해결
   - 두개의 branch의 같은 부분이 서로 다르게 수정된 경우 merge를 하면 conflict가 발생
   - **git merge [branch]** 를 수행하면 conflict가 발생한 부분이
  	**<<<<<<<< HEAD
  			<-------- 이 사이 구간이 현재 체크 아웃된 브랜치의 내용
  	============
  			<-------- 이 사이 구간이 병합하려는 대상의 내용
  	>>>>>>>> branch
     와 같이 표시된다.**
   - 코드를 적절히 수정한 뒤 파일 저장
   - **git add [conflict 발생한 파일명]** : 수정 후 add 한다.
   - **git commit** : 마지막으로 commit하면 병합이 완료된다.

 ---


### 14. stash
 - 다른 브랜치로 checkout을 해야 하는데(커밋을 하지 않으면 checkout 불가능) 현재 브랜치에서 작업이 완료되지 않은 경우 커밋을 하기에 애매하다
 - 이런 경우 작업중이던 파일을 임시로 저장해두고 현재 브랜치의 상태를 마지막 커밋의 상태로 초기화하는 기능
 - **git stash** : 작업중인 내용을 임시 저장(git status하면 변경사항들이 사라짐)
 - **git stash apply** : 임시 저장해둔 작업을 불러옴(git status하면 변경사항들이 다시 나타남)
 - **git stash list** : stash한 목록을 표시(윗쪽부터 최신 statsh)
 - **git stash drop** : 가장 최신의 statsh를 삭제
 - **git stash apply**; git stash drop; : stash 적용과 삭제를 한번에 명령
 - **git stash pop** : git stash apply; git stash drop; 와 동일
 - stash는 git add되어 버전 관리가 되고 있는 파일에 대해서만 사용가능(add되지 않는 파일은 statsh 불가능)

 ---


### 15. 원격 저장소
 - 원격 저장소의 의미
	- 원격 저장소에 source 백업가능
	- 다른 사람과 협업가능
 - 원격 저장소의 기초
 	- **git remote add origin [저장소의 주소]** : 원격저장소를 설정(origin은 저장소의 별명)
 	- **git remote -v** : 원격저장소의 상세 내용 표시
 	- **git remote remove origin** : 원격저장소 삭제
 	- **git push** : 원격저장소로 source 업로드
		- **git push --set-upstream origin master** : 현재 로컬 저장소의 브렌치를 원격저장소의 마스터 브렌치로 푸쉬

   ---
