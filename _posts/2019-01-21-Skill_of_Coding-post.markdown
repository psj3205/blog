---
layout: post
title:  "코딩의 기술 정리"
date:   2019-01-21 15:38:02 +0900
---

### 1. 읽기 좋은 코드를 작성하는 기술
* 1.1 읽기 좋은 코드란?
	- 1.1.1 코드의 보수성
		1. 개발 현장의 코드는 제대로 작동할 뿐만 아니라, 기능 추가 또는 지속적인 변경에도 잘 견딜 수 있어야 함
	- 1.1.2 읽기 좋은 코드를 작성하는 요령
		1. 코드의 의도를 명확하게 전달하자
		2. 복잡한 코드 문제를 작게 나눈다
		3. 읽기 좋은 이름을 붙여 정리하자
	
* 1.2 변수와 상수
	- 1.2.1 의미가 명확한 변수 이름 붙이기
		1. 변수에 의미 있는 이름을 붙히는 것은 코드 가독성 향상의 기본
		2. 사용 목적을 가능한 구체적으로 입력
	- 1.2.2 매직 넘버에 이름 붙이기
		1. 매직 넘버 : 코드 작성자만 알 수 있는, 코드 내부에 들어 있는 상수값
		2. 매직 넘버로 특정 상태를 구분하면 코드 전체의 흐름을 다른 사람이 이해하기 어렵다
		3. 열거형을 사용해서 매직 넘버에 이름을 붙히자

* 1.3 조건식과 계산식
	- 1.3.1 읽기 좋은 조건식을 작성하는 요령
		1. 복잡한 조건식을 구성하는 경우에는 '설명 전용 변수'를 사용하라(지역 변수를 사용해 조건식에 이름을 붙이는 방법)
		eg) const bool isJump = y > 0.0f;
			const bool isDamage = state == STATE_DAMAGE;
			const bool isDash = (speed >= 10.0f) && !isJump && !isDamage;
			if (isDash) {

			}

		2. 조건식을 함수화하라
		3. 조건식을 함수화하면 여러곳에서 재사용할 수 있으며 단위 테스트도 간단해진다
	- 1.3.2 읽기 좋은 계산식을 작성하는 요령
		1. 조건식과 마찬가지로 계산식에도 설명 전용 변수를 사용하면 가독성이 향상
		2. 계산식을 함수화하라

* 1.4 assert 활용
	- 1.4.1 assert 사용 방법
		1. assert는 매개 변수의 조건식이 false인 경우 오류 메시지를 표시하고 프로그램을 중지시키는 매크로로, 디버그를 지원하기 위한 기능
		2. 주로 매개 변수와 계산 결과의 타당성 체크 등에 활용

* 1.5 제어문
	- 1.5.1 if 조건문 감축과 단순화
		1. if 조건문은 하나씩 추가할 때마다 실행 경로가 증가
		2. 실행 경로는 일직선으로 구성되는 것이 가장 이상적
		3. 따라서 어떻게 해야 if 조건문을 사용하지 않고 코드를 구성할지 생각하자
		4. 하한값, 상한값 체크 단순화
		eg) if(x > 10) {
				x = 10;
			}
			STL의 min함수를 사용하면 다음과 같이 개선 가능
			x = std::min(x, 10);

			if( x > 10) {
				x = 10;
			} else if(x < 0) {
				x = 0;
			}
			min함수와 max함수를 함께 사용해서 개선 가능
			x = std::min(std::max(x, 0), 10);

		5. 랩 어라운드의 함수화 
		6. 랩 어라운드란, 어떤 숫자가 상한값에 이르면 하한값으로 돌려주고 다시 계산하는 것
		7. 하한값에서 상한값 사이의 숫자를 반복하고 싶을 때 사용
		eg) if( x >= 10) {
				x = 0;
			}
			if 조건문 대신 나머지 연산자(%)를 사용
			x = x % 10;
		8. 나머지 연산만으로는, 하한값 아래로 내려갔을 경우 상한값으로 바꾸는 마이너스 방향의 랩 어라운드는 불가능
		9. 아래의 방법으로 마이너스 방향의 랩 어라운드도 가능
		eg) if (x >= 10) {
				x = 0;
			} else if(x < 0) {
				x = 9;
			}

			int wrap(int x, int low, int high) {
				assert(low < high);
				const int n = (x - low) % (high - low);
				return (n >= 0) ? (n + low) : (n + high);
			}

---
