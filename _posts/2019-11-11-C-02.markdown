---
layout: post
title:  "C언어 본색 정리"
date:   2019-11-11 11:45:02 +0900
---

# 2. C언어의 기본 구조와 표준 입출력
## 2.1 C언어의 기본 구조
  ```c
  #include <stdio.h>

  int main(void){
    printf("Hello C world \n");
    return 0;
  }
  ```
  - 전처리기(Proprocessor)
    - 컴파일러가 컴파일을 수행하기 전에 **먼저** 처리한다.
  - 헤더 파일
    - 확장자 H를 갖는 파일
    - **표준 라이브러리 함수들의 동작을 정의해 놓은 파일**
  - main() 함수
    - 프로그램이 실행될 때 **가장 먼저** 호출되고 **가장 나중에** 종료되는 함수
    - 운영체제가 호출
      - 소스 파일을 컴파일하고 링크해서 만든 실행파일을 실행하면 운영체제가 실행파일 내의 main()함수를 가장 먼저 호출하기로 약속되어 있음
    - C언어로 작성된 프로그램은 **main()함수를 반드시 가지고 있음**
    - 함수의 기능은 **중괄호 안**에 작성한다.
    - 세미콜론은 연산을 수행하는 **문장이 끝남을 의미**
    - return은 **반환**과 **종료**의 의미를 가짐
      - 함수를 호출한 영역으로 값을 반환
      - main()함수를 종료

## 2.2 printf() 함수
  ```c
  #include <stdio.h>
  int main(void){
    printf("%d 더하기 %d는 %d입니다. \n", 3, 5, 3 + 5);
    printf("%i 더하기 %i는 %i입니다. \n", 3, 5, 3 + 5);
  }
  ```
  - printf() 함수는 숫자들의 계산, 10진수 정수, 8진수 정수, 16진수 정수, 실수, 문자, 문자열 등을 출력

    서식문자|출력형태
    -------|--------
    %d, %i|10진수 정수(양수, 음수 모두 가능)
    %x, %o|16진수 정수, 8진수 정수(양수만 가능)
    %f, %lf|10진수 실수(양수, 음수 모두 가능)
    %c|한 개의 문자
    %s|문자열
    %u|10진수 정수(양수만 가능) %d의 두배 범위
    %e, %E|e표기법, E표기법에 의한 실수
    %g, %G|소수점 이하 자리수에 따라 %f, %e 둘중 선택
    %%|% 기호 출력

## 2.3 scanf() 함수
  - 표준입력 : 키보드로부터 데이터를 입력받는 것
  - 표준출력 : 데이터를 모니터로 출력하는 것
  - scanf()함수는 키보드로 데이터를 입력받을 수 있는 함수
  ```c
  #include <stdio.h>

  int main(void){
    int age;
    scanf("%d", &age);
    printf("your age is %d", age);
    return 0;
  }
  ```
---

# 3. 변수란 무엇인가?
## 3.1 변수 선언하기
  - 변수 : 데이터를 저장하는 **메모리 공간**
  - 데이터를 저장하기 위해서는 반드시 **변수(메모리 공간)이 필요**
  - 변수의 형태
    - 정수형 변수 : char형, short형, int형, long형
    - 실수형 변수 : float형, double형, long double형
  - 변수는 언제든지 **다른 데이터로 변경**될 수 있다.

## 3.2 변수 선언 시 주의 점
  - C언어에서 변수를 선언할 경우, 함수의 맨 처음에서 해야 한다.
  - 특수기호, 공백문자, 변수 이름 맨 처음에 숫자를 사용하면 안됨
  - C언어는 **대소문자를 구분**

## 3.3 변수의 시작 주소와 & 연산자
  - 특정 변수가 메모리 공간의 어디에 있는지를 가리키는 것을 **변수의 시작 주소**라고 한다.
  - C언어에서는 **&연산자**를 사용하면 변수의 시작 주소를 알 수 있음

  ```c
  #include <stdio.h>

  int main(void) {
    int a = 3;
    int b = 4;

    printf("a의 값 : %d \n", a);
    printf("b의 값 : %d \n", b);

    printf("변수 a의 시작 주소 : %x \n", &a);
    printf("변수 b의 시작 주소 : %x \n", &b);
    
    return 0;
  }
  ```

---
# 4. 상수란 무엇인가?
## 4.1 상수란?
  - 상수 : 프로그램 실행 도중 **값이 변경되지 않는 데이터**
  - 상수의 형태
    - 리터럴 상수 : 글자 그대로 의미가 있어서 이름이 없는 상수
      - 정수형 상수, 실수형 상수, 문자 상수, 문자열 상수
    - 심볼릭 상수 : 상수를 기호화하여 변수처럼 이름을 지어 쓰는 상수
      - 변수를 상수화하는 것

## 4.2 리터럴 상수
  ```c
  #include <stdio.h>
  
  int main(void){
    printf("10진수 정수형 상수 %d + %d = %d \n", 10, 20, 10 + 20);
    printf("16진수 정수형 상수 %x + %x = %x \n", 0x10, 0x20, 0x10 + 0x20);
    printf("8진수 정수형 상수 %o + %o = %o \n", 010, 020, 010 + 020);

    return 0;
  }
  ```
  - 정수형 상수 : 소수점이 포함되지 않은 상수

  ```c
  #include <stdio.h>

  int main(void){
    printf("실수형 상수 %lf + %lf = %lf입니다. \n", 3.1, 4.1, 3.1+ 4.1);

    return 0;
  }
  ```
  - 실수형 상수 : 소수점이 포함된 상수
  - 문자 상수 : **작은따옴표**로 묶은 문자 한개
  - 문자열 상수 : **큰따옴표**로 묶은 문자열
    - 컴파일러는 큰따옴표로 묶은 문자열 상수를 저장할 때 문자열 상수 끝에 문자열의 끝을 알리는 종료문자 **\0**을 자동으로 추가하는데 이것을 **NULL문자**라고 함
  
## 4.3 심볼릭 상수
  - 심볼릭 상수를 만드는 방법
    ```c
    #include <stdio.h>
    
    #define PI 3.14

    int main(void){
      const int NUM = 100;

      return 0;
    }
    ```
    - `const` 키워드 사용
    - `#define` 문 사용
    - 심볼릭 상수는 반드시 선언과 초기화를 동시에 해야한다.
    - #define 문은 전처리기에서 수행되는 문장으로 소스를 컴파일하기 전에 먼저 수행

---
# 5. 연산자란 무엇인가?
## 5.1 연산자의 종류
  - 연산자(Operator) : **연산을 수행하는 기호**를 의미
  - 피연산자(Operand) : 연산에 참여하는 변수나 상수 값

    분류|연산자
    ----|-----
    대입연산자|=
    산술연산자|+, -, *, /, %
    복합대입연산자|+=, -=, *=, /=, %=
    증감연산자|++, --
    관계연산자|>, <, ==, !=, >=, <=
    논리연산자|&&, \|\|\, !
    조건연산자|? :
    비트논리연산자|&, \|\, ^, ~ 
    비트이동연산자|>>, <<

  - C언어의 관계연산자는 **참/거짓**을 숫자로 표현
    - 거짓: 0(10진수 0)으로 표현
    - 참: 1(10진수 1)으로 표현
    - **0이외의 모든 숫자는 참으로 인식**

## 5.2 비트 연산자
  - 컴퓨터는 모든 정보를 **1과 0으로 이루어진 이진값**으로 저장하고 처리
  - 비트(Bit) : 2진수 값 하나를 저장할 수 있는 최소 메모리 공간
  - 바이트(Byte) : 8개의 연속된 비트, 총 256(2^8)가지의 경우를 표현
  - 16진수는 2진수 네자리, 8진수는 2진수 세자리를 각각 한자리 숫자로 표현 가능
  - 왼쪽 시프트 연산자
    ```c
    #include <stdio.h>
    int main(void){
      int num1 = 10;

      int result1 = num1 << 1;

      printf("비트 단위 >> 연산의 결과 %d \n", result1);

      return 0;
    }
    ```
    - 왼쪽 시프트 연산자인 경우 빈공간을 무조건 0으로 채움
    - 어떤 값을 왼쪽으로 1비트 씩 이동시킬 때마다 **2가 곱해진다.**
  - 오른쪽 시프트 연산자
    ```c
    #include <stdio.h>
    int main(void){
      int num1 = 10;
      int num2 = -10;

      int result1 = num1 >> 1;
      int result2 = num2 >> 1;

      printf("비트 단위 >> 연산의 결과 %d \n", result1);
      printf("비트 단위 >> 연산의 결과 %d \n", result2);

      return 0;
    }
    ```
    - 변수가 양수이면 빈 공간을 0으로 채움
    - 변수가 음수이면 빈 공간을 1로 채움
    - 어떤 값을 오른쪽으로 1비트 씩 이동시킬 때마다 **2가 나누어진다.**
    - 5장 연습문제 7번 풀이
    ```c
    #include <stdio.h>
    #include <math.h>
    int main(void) {
      int x;
      int i;
      int result = 0;
      scanf_s("%d", &x);
      
      for (i = 0; i < 32; i++) {
        result += x % 10 ? pow(2, i) : 0;
        x /= 10;
      }
      printf("%d \n", result);

      return 0;
    }
    ```
---

# 6. 자료형이란 무엇인가?
## 6.1 자료형이란
  - 변수가 저장하는 **데이터의 형식(Data Type)**
  - 변수 선언 시, 자료형과 변수 이름을 **공백으로 구분**
  - 자료형에 해당하는 크기의 메모리가 할당
  - 자료형의 종류
    - 정수형(char, short, int, long)
    - 실수형(float, double, long double)
  - 자료형마다 **메모리 공간의 크기**가 다르고, **서식문자**와 데이터 **표현 범위**가 다름
  - 기본 자료형의 메모리 크기
    - 정수형

      char|short|int|long
      --|--|--|--
      1바이트|2바이트|4바이트|4바이트

    - 실수형

      float|double|long double
      --|--|--
      4바이트|8바이트|8바이트
  
## 6.2 정수형
  - 정수형 자료형의 표현 범위

    정수형|메모리 크기|데이터 표현 범위
    --|--|--
    char|1바이트|-128 ~ +127
    short|2바이트|-32768 ~ +32767
    int|4바이트|-2147483648 ~ +2147483647
    long|4바이트|-2147483648 ~ +2147483647

  - `unsigned` 키워드는 정수형의 양수 표현 범위를 두배로 늘린다.
    - `signed` : 양수, 0, 음수를 모두 표현(보통 생략)
    - `unsigned` : 양수, 0만 표현
  - `unsigned`형을 출력할 때는 **%u**를 사용해야 한다.
  - **정수형**은 `int`형을 선호
    - 정수형 데이터를 저장하는 변수를 선언할 때는 주로 int형을 사용한다.
    - 정수형 자료형 중에 int형을 CPU가 가장 빠르게 처리하기 때문에
    - 현재 개발된 대부분의 컴퓨터는 32비트 이상의 시스템이기 때문에 CPU가 연산하는 기본 단위가 최소 32비트이다.
    - 따라서 정수 데이터를 char형 변수에 저장하여 덧셈을 할 경우 int형으로 바꿔서 연산한다.

## 6.3 실수형
  - 실수형 자료형의 표현 범위

    실수형|메모리 크기|데이터 표현 범위
    -|-|-
    float|4바이트|1.17 * 10<sup>-38</sup> ~ 3.40 * 10<sup>38</sup>
    double|8바이트|2.22 * 10<sup>-308</sup> ~ 1.79 * 10<sup>308</sup>
    long double|8바이트|2.22 * 10<sup>-308</sup> ~ 1.79 * 10<sup>308</sup>

  - 실수형은 데이터의 정밀도를 높이기 위해 사용
    - 실수형 자료형의 정밀도

      실수형|표현 가능한 소수점 이하 자리수
      -|-
      float|소수점 이하 6자리
      double|소수점 이하 15자리
      long double|소수점 이하 15자리 또는 그 이상

  - **실수형**은 `double`형을 선호
    ```c
    #include <stdio.h>
    int main(void){
      float num1 = 0.123456789012345;
      double num2 = 0.123456789012345;

      printf("float형 : %f \n", num1);
      printf("double형 : %lf \n", num2);

      printf("float형 : %.15f \n", num1);
      printf("double형 : %.15lf \n", num2);

      return 0;
    }
    ```

## 6.4 문자형
  - 컴퓨터는 **ASCII** 코드를 참조해서 문자를 인식한다.
  - **문자형**은 `char`형을 선호
  - 문자형 변수에는 반드시 ASCII 코드로 지정된 숫자 또는 문자만 지정 가능
  - 한글은 하나의 글자가 2바이트이므로 char형 변수에 넣을 수 없다.
  - 하나의 문자를 문자형 변수에 넣을 경우 반드시 작은따옴표를 사용

## 6.5 자료형 변환
  - 서로 다른 자료형 간에 연산을 하게 되면 **자료형의 변환**이 발생
  - 자료형의 두가지 방식
    - 자동 형변환 : 컴파일러가 자동으로 수행
    - 강제 형변환 : 프로그래머가 수동으로 수행
  - 자동 형변환
    - 다른 자료형 간에 **산술 연산을 하는 경우**에 발생
      - 연산에 참여하는 피연산자의 자료형은 **정밀도가 작은 자료형이 큰 자료형으로 변환**
    ```
    char => int => long => float => double => long double
    ```
    - **대입 연산을 하는 경우** 대입 연산자를 기준으로 오른쪽에서 왼쪽으로 자동 형변환 발생
  - 강제 형변환
    - **괄호 연산자 ( )**를 사용하여 원하는 자료형으로 강제 형변환할 수 있음
    ```c
    int num1 = 2;
    (double)num1;
    ```

## 6.6 `typedef`를 이용한 자료형의 재정의
  - 자료형을 재정의하면 자료형을 좀 더 간결하게 나타낼 수 있고, 프로그램의 가독성을 높인다.
    ```c
    typedef int mytype;
    ```

---

# 9. 함수란 무엇인가
## 9.1 함수란
  - 함수 : 특정 작업을 수행하는 **코드의 집합**
  - 프로그램을 작성할 시, 함수 단위로 작성하면 코드의 **안정성/ 재사용성이 향상**
  
## 9.2 다양한 형태의 함수들
  - int func(int x, int y) : 11형태
  - int func(void) : 10형태
  - void func(int x, int y) : 01형태
  - void func(void) : 00형태

## 9.3 함수 적용 방법
  - 함수의 정의 => 함수의 호출 : 함수의 정의가 먼저되어 있어야 호출 가능
  - 함수의 선언 => 함수의 호출 => 함수의 정의 : 함수의 선언을 먼저하면 함수의 호출 을 함수의 정의보다 먼저할 수 있다.

## 9.4 변수의 종류와 범위
  - 함수에서 사용되는 변수
    - 지역변수, 전역변수, 정적변수, 외부변수, 레지스터변수
  - 지역변수
    - main() 함수, 조건문, 반복문의 **중괄호 내부**와 **함수의 매개변수**로 사용되는 변수
    - 지역변수의 특징
      - 초기화를 하지 않으면 **쓰레기값이 저장**
      - 지역변수의 메모리 생성 시점 : 중괄호 내에서 초기화할 때
      - 지역변수의 메모리 소멸 시점 : 중괄호를 탈출할 때
  - 전역변수
    - **중괄호 외부**에 선언되는 변수
    - 어느 지역에서도 사용이 제한되지 않는 변수
    - 전역변수는 **반드시 상수로 초기화**해야 한다.
    - 만약 초기화 하지않으면 자동으로 0으로 초기화된다.
    - 전역변수의 특징
      - 초기화를 하지 않아도 **자동으로 0이 저장**
      - 전역변수의 메모리 생성 시점 : 프로그램이 시작될 때
      - 전역변수의 메모리 소멸 시점 : 프로그램이 종료될 때
  - 정적변수
    - **전역변수의 단점을 부분적으로 보완**한 변수
    - 정적변수는 변수의 자료형 앞에 `static` 키워드를 추가
      ```c
      static int num;
      ```
    - 정적변수는 전역변수처럼 프로그램이 종료되지 않는 한 메모리가 소멸되지 않음
    - 전역변수와 마찬가지로 **반드시 상수로 초기화**
    - 전역변수와 마찬가지로 초기화 하지 않으면 자동으로 0으로 초기화
    - 전역변수와 다른점
      - 프로그램이 시작되면 **초기화는 딱 한 번만 수행**
      - 정적변수는 **중괄호 내에서 선언**되므로 중괄호 이외의 영역에서 사용하면 에러 발생
    - 정적변수는 함수의 내부, 조건문, 반복문 등과 같이 중괄호 내부에서 전역변수의 기능을 사용하고 싶을 때 사용
    - 이렇게 중괄호 내에서만 전역변수처럼 사용되는 정적변수를 **정적지역변수**라고 함
    - 정적지역변수의 특징
      - 자료형 앞에 `static` 키워드 붙임
      - 초기화를 하지 않아도 자동으로 0이 저장
      - 반복문의 중괄호 내에서 선언되었더라도 **초기화는 한 번만 수행**
      - 정적지역변수의 메모리 생성 시점 : 중괄호 내에서 초기화될 때
      - 정적지역변수의 메모리 소멸 시점 : 프로그램이 종료될 때
  - 외부변수
    - 외부변수는 현재 파일이 아닌 **외부 파일에서 선언된 변수를 참조**하여 사용하는 변수
    - 외부변수의 특징
      - 자료형 앞에 `extern` 키워드를 붙임
      - 다른 파일에 있는 **전역 변수를 참조**
    - 특정 전역 변수는 외부에서 참조하지 못하게 하고 싶다면 `static` 키워드를 붙인다. 이러한 변수를 **정적전역변수**라고 한다
  - 레지스터변수
    - **CPU 내부의 임시 기억 장소**, 즉 **레지스터에 변수를 할당**하여 값을 저장하는 변수
    - 지역변수는 **CPU 외부의 주기억 장치**에 변수를 할당하므로 입출력 속도가 느림
    - 레지스터변수는 CPU 내부에 있는 레지스터에 변수를 할당하므로 입출력 **속도가 빠름**
    - 레지스터변수를 선언하더라도 CPU 내부의 레지스터가 모자라면 지역변수로 할당된다.

---

# 10. 1차원 배열이란 무엇인가
## 10.1 1차원 배열이란
  - 배열 : **같은 자료형을 가진 연속된 메모리 공간**으로 이루어진 자료구조
  - 배열의 선언
    ```c
    int array[10];
    ```
    - 자료형 : 배열의 자료형을 지정
    - 배열 이름 : 변수 이름과 마찬가지로 배열을 구분하는 이름
    - 배열 길이 : 배열 요소의 총 길이
  - 배열의 초기화
    ```c
    #include <stdio.h>
    int main(void){
      int array1[5] = {90, 80, 70, 60, 50};
      int array2[] = {90, 80, 70, 60, 50}; // 5개의 데이터를 저장하므로 배열길이는 5로 선언됨
      int array3[5] = {90, 80, 70};

      return 0;
    }
    ```
    - **중괄호를 이용**하여 배열에 데이터를 저장
    - 데이터를 저장하지 않은 배열 공간은 **0으로 자동 초기화**
  - 배열 선언 시 주의할 점
    - 배열 초기화를 중괄호로 할 때 배열의 **선언과 초기화는 동시에** 이루어져야 한다.
    ```c
    #include <stdio.h>
    int main(void){
      int array1[3] = {1, 2, 3}; // 정상
      int array2[3];

      array2 = {1, 2, 3};        // 에러 발생

      return 0;
    }
    ```
  - 배열 길이는 **변수가 될 수 없다.**

## 10.2 1차원 배열의 주소와 값의 참조
  - **`&`는 주소를 참조**하는 연산자
  - 변수 이름 앞에 `&` 연산자를 붙여서 변수의 시작 주소를 알 수 있었던 것처럼 배열 요소 앞에 `&` 연산자를 붙이면 각 **배열 요소의 시작 주소**를 알 수 있다.
  - **배열 이름**은 배열의 시작 주소
    ```c
    #include <stdio.h>
    int main(void){
      int array[3] = {1, 2, 3};

      printf("%x %x %x \n", array+0, array+1, array+2);
      printf("%x %x %x \n", &array[0], &array[1], &array[2]);

      return 0;
    }
    ```
    - 배열이름은 배열의 시작 주소를 나타냄
    - 배열이름에 각 요소의 인덱스를 더하면 각 요소의 시작 주소를 나타냄
  - **`*`는 메모리 공간에 저장된 값을 참조**하는 연산자
    ```c
    #include <stdio.h>
    int main(void){
      int array1[3] = {1, 2, 3};

      printf("%d %d %d \n", *&array1[0], *&array1[1], *&array1[2]);
      printf("%d %d %d \n", *&*&array1[0], *&*&array1[1], *&*&array1[2]);
      printf("%d %d %d \n", *array1, *(array1 + 1), *(array1 + 2);

      return 0;
    }
    ```
    ```c
    *array + 3 // 첫 번째 요소의 값에 3을 더함
    *(array + 3) // 네 번째 요소의 값
    *(array + i) == array[i] == *&array[i]
    ```

---

# 11. 다차원 배열이란 무엇인가
## 11.1 다차원 배열이란
  - 2차원 배열의 선언
    ```c
    int array[4][3];
    ```
    - 자료형 : 배열의 자료형을 지정
    - 배열 이름 : 변수 이름과 마찬가지로 배열을 구분하는 배열의 이름
    - 배열 길이 : 배열 요소의 길이를 행과 열로 지정
- 2차원 배열의 초기화
  ```c
  #include <stdio.h>
  int main(void){
    int array1[4][3] = {1,2,3,4,5,6,7,8,9,10,11,12};
    int array2[4][3] = {1,2,3,4,5};

    return 0;
  }
  ```
  - 초기화되지 못한 배열 공간은 **0으로 자동 초기화**
- 2차원 배열을 행 단위로 초기화하기
  ```c
  #include <stdio.h>
  int main(void) {
    int array1[4][3] = { {1, 2}, {3}, {4}, {5} };
    int array2[4][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {10} };

    return 0;
  }
  ```
  - **중괄호를 중첩하여 사용**하면 행 단위로 배열을 초기화 가능
  - 초기화되지 못한 배열 공간은 **0으로 자동 초기화**
- 2차원 배열을 선언할 때 **열의 길이는 반드시 설정**해야 한다.
  ```c
  int array1[][] = {1,2,3,4,5,6,7,8,9,10,11,12}; // 에러
  int array2[4][] = {1,2,3,4,5,6,7,8,9,10,11,12}; // 에러
  int array3[][3] = {1,2,3,4,5,6,7,8,9,10,11,12}; // 정상
  int array4[][2] = {1,2,3,4,5,6,7,8,9,10,11,12}; // 정상
  int array5[][4] = {1,2,3,4,5,6,7,8,9,10,11,12}; // 정상
  ```

## 11.2 2차원 배열의 주소와 값의 참조
  - 2차원 배열에서도 마찬가지로 **`&` 연산자로 할당된 메모리 공간의 주소를 참조**
  - 2차원 배열의 이름은 **2차원 배열의 시작 주소**이다.
    ```c
    #include <stdio.h>
    int main(void){
      int array[2][2] = {1,2,3,4};
      printf("%x \n", array);     // 0행의 주소
      printf("%x \n", array + 1); // 1행의 주소
      return 0;
    }
    ```
  - 2차원 배열의 행의 요소는 **행을 대표하는 주소**이다.
    ```c
    #include <stdio.h>
    int main(void){
      int array[2][2] = {10, 20, 30, 40};

      printf("%x %x \n", array[0], &array[0][0]); // 0행의 대표 주소
      printf("%x %x \n", array[1], &array[1][0]); // 1행의 대표 주소  

      return 0;
    }
    ```
      - 1차원 배열과 달리 array[0]은 값이 아니라 0행을 대표하는 주소이다.
      - 즉 0행 0열의 주소
  - 2차원 배열에서 array[i], *(array + i)는 i행의 주소를 표현
    - 1차원 배열에서 array[i], *(array + i)는 **i행의 값을 표현**
    - 하지만 2차원 배열에서 array[i], *(array + i)는 **i행의 주소를 표현**
    - ***주의할 점*** : 2차원 배열에서는 array + i도 i행의 주소를 나타낸다
    ```c
    #include <stdio.h>
    int main(void){
      int array[2][2] = {1,2,3,4};

      printf("%x %x \n", &array[0][0], &array[0][1]);
      printf("%x %x \n", &array[1][0], &array[1][1]);
      printf("======================\n");
      printf("%x %x \n", array[0] + 0, array[0] + 1);
      printf("%x %x \n", array[1] + 0, array[1] + 1);
      printf("======================\n");
      printf("%x %x \n", *(array + 0) + 0, *(array + 0) + 1);
      printf("%x %x \n", *(array + 1) + 0, *(array + 1) + 1);
      return 0;
    }
    ```
      - 주소연산에서 +0, +1의 의미는 **선언된 자료형의 크기만큼 더하라는 의미**이다

---

# 12. 포인터란 무엇인가
## 12.1 포인터란
  - 포인터 : **주소를 저장**하는 변수
  - 기존의 변수는 데이터를 저장하는 반면 **포인터는 메모리 공간의 주소를 저장**

## 12.2 포인터 변수의 선언과 사용
  - 포인터 변수의 선언
    ```c
    int* pointer = NULL;
    ```
    - 자료형 : 포인터 변수의 자료형을 지정, 자료형 다음에 **`*` 연산자 붙임**
    - 포인터 변수 이름 : 주소를 저장할 변수의 이름 지정
    - NULL 포인터 설정 : 포인터 변수 선언 시 `NULL`로 초기화
    - **`NULL` 포인터**는 포인터 변수에 아무 주소도 저장하지 않는다는 의미
    ```c
    #include <stdio.h>
    int main(void){
      char* cp = NULL;
      int* ip = NULL;

      printf("%x %x %x \n", &cp, cp, *&cp); 
      // &cp : 포인터 변수 cp의 주소
      // cp : 포인터 변수 cp에 저장된 데이터
      // *&cp : 포인터 변수 cp에 저장된 데이터
      printf("%x %x %x \n", &ip, ip, *&ip);

      printf("%d %d \n", sizeof(char*), sizeof(int*));
      printf("%d %d \n", sizeof(cp), sizeof(ip));

      return 0;
    }
    ```
      - 포인터 변수 선언 시 `NULL`로 초기화 했기 때문에 포인터 변수에는 **0이 저장된다.**
      - `NULL`은 ASCII 값으로 0이다.
      - 32비트 운영체제 기준으로 **모든 포인터 변수의 크기는 4바이트**
  - 포인터 변수의 사용
    ```c
    #include <stdio.h>
    int main(void){
      char c = 'A';
      char* cp = NULL;

      cp = &c;

      printf("%x %c %c \n", &c, c, *&c);
      printf("%x %x %x \n", &cp, cp, *&cp);

      printf("%c \n", c);
      printf("%c \n", *cp);

      return 0;
    }
    ```
      - c == *&c == *cp
  - 포인터 변수 **선언과 초기화를 동시**에 할 수도 있다.
    ```c
    char* cp = &c;
    ```
- 포인터 사용 시 주의사항
  - 포인터 변수는 반드시 간접 접근할 변수의 주소를 초기화한 후에 사용해야한다.
  - 포인터 변수에 임의의 주소를 초기화할 수 없다.

## 12.3 다차원 포인터 변수의 선언과 사용
  - 다차원 포인터 : **2차원 이상**의 포인터 변수
  - 다차원 포인터 선언
    ```c
    int** p2 = NULL; // 2차원 포인터
    ```
      - 자료형 : 2차원 포인터 변수의 자료형을 지정, 자료형 뒤에 `*`를 두 개 지정
      - 2차원 포인터 변수 이름 : **1차원 포인터의 주소를 저장**할 2차원 포인터 변수의 이름 지정
    ```c
    int*** p3 = NULL; // 3차원 포인터
    ```
      - 자료형 : 3차원 포인터 변수의 자료형을 지정, 자료형 뒤에 `*`를 세 개 지정
      - 3차원 포인터 변수 이름 : **2차원 포인터의 주소를 저장**할 3차원 포인터 변수의 이름 지정
  - 모든 포인터 변수에는 4바이트 크기의 메모리 공간이 할당되므로 **포인터 변수도 주소를 가짐**
  - 2차원 이상의 포인터 변수는 포인터 변수의 주소를 저장하는 변수
    - 1차원 포인터 변수는 일반 변수의 주소를 저장
    - **n차원 포인터 변수는 n-1차원 포인터 변수의 주소를 저장**
    ```c
    #include <stdio.h>
    int main(void){
      int num = 0;
      int* p1 = NULL;
      int** p2 = NULL;
      int*** p3 = NULL;

      p1 = &num;
      p2 = &p1;
      p3 = &p2;

      return 0;
    }
    ```
    - n차원 포인터는 `***` 연산자를 n개 사용**해야 데이터에 간접 접근할 수 있음

## 12.4 주소의 가감산
  ```c
  #include <stdio.h>
  int main(void){
    char c = 'A';
    char* cp = NULL;
    char** cpp = NULL;

    cp = &c;
    cpp = &cp;

    printf("%x %x %x \n", &c, &cp, &cpp);
    printf("%x %x %x \n", &c+1, &cp+1, &cpp+1);

    printf("%c %x %x \n", c, cp, cpp);
    printf("%c %x %x \n", c+1, cp+1, cpp+1);

    return 0;
  }
  ```
  - C언어의 자료형은 모두 주소를 가지며 **주소의 가감산이 가능**
  - 자료형의 크기에 따라 가감산의 단위가 다름
    - `char`형 주소에 +1을 하면 **1바이트 증가**
    - `int`형 주소에 +1을 하면 **4바이트 증가**
    - `double`형 주소에 +1을 하면 **8바이트 증가**

## 12.5 함수 포인터
  - 함수 이름은 **함수의 시작주소**
    - 함수를 실행하기 위해서는 함수가 있는 메모리 공간의 주소가 필요한데 그것이 **함수의 이름**
    ```c
    #include <stdio.h>
    int main(void){
      printf("%x %x %x \n", main, printf, scanf); // 함수의 이름은 함수의 시작주소

      return 0;
    }
    ```
  - 함수 포인터는 **함수의 시작 주소를 저장하는 변수**
    ```c
    int (*pointer) (int, int)
    ```
      - 자료형 : 가리키는 대상이 되는 함수의 자료형을 설정
      - 함수 포인터 이름 : 함수 포인터의 이름을 설정하며 **괄호와 *을 반드시 사용**
      - 인수 자료형 목록 : 가리키는 대상이 되는 함수의 인수들의 자료형 목록
  - 함수 포인터를 사용하는 방법
    ```c
    #include <stdio.h>
    void add(double num1, double num2);

    int main(void){
      double x = 3.1, y = 5.1;
      void (*pointer) (double, double);

      printf("add함수의 주소 : %x \n", add);
      printf("함수 포인터의 주소 : %x \n", &pointer);

      pointer = add;  // 함수 포인터 pointer에 함수의 시작 주소 add를 저장
      pointer(x,y);

      return 0;
    }

    void add(double num1, double num2){
      double result;
      result = num1 + num2;
      printf("$lf + %lf = %lf입니다. \n", num1, num2, result);
    }
    ```

---

# 13. 포인터와 배열
## 13.1 포인터와 1차원 배열
  - 배열 이름은 **배열의 시작주소**
    ```c
    #include <stdio.h>
    int main(void){
      int array[3] = {10, 20, 30};

      printf("%x %x %x \n", array, array+0, &array[0]); // 첫 번째 요소의 주소
      printf("%x %x \n", array+1, &array[1]) // 두 번째 요소의 주소
      printf("%x %x \n", array+2, &array[2]) // 세 번째 요소의 주소

      printf("%d %d %d \n", sizeof(array), sizeof(array+0), sizeof(&array[0]));
      // array의 크기는 12바이트, array+0의 크기는 4바이트

      return 0;
    }
    ```
      - 배열 이름 array의 크기는 12(배열 전체의 크기)바이트이다.
  - 1차원 포인터 변수에 1차원 배열의 주소를 저장하면 **포인터 변수를 배열처럼 사용 가능**
    ```c
    #include <stdio.h>
    int main(void){
      int array[3] = {10, 20, 30};
      int i = 0;
      int* p = NULL;

      p = array;

      for(i = 0; i < 3; i++){
        printf("%d %d %d \n", *(p+i), *&p[i], p[i]);
      }

      printf("---------------------\n");

      for(i = 0; i < 3; i++){
        printf("%d %d %d \n", *(array+i), *&array[i], array[i]);
      }      

      printf("---------------------\n");
	  printf("%d %d \n", sizeof(array), sizeof(p));

      return 0;
    }
    ```
      - 포인터 변수와 배열의 크기 차이
        - array의 크기는 array배열 전체의 크기 12바이트
        - 포인터 p의 크기는 4바이트(모든 포인터의 크기는 4바이트이므로)

## 13.2 포인터와 2차원 배열
  - 1차원 배열일 때 *(array+i) === array[i] === *&array[i]는 **값**
  - 2차원 배열일 때 *(array+i) === array[i] === *&array[i]는 **주소**
  - 포인터 변수를 통한 2차원 배열의 접근
    ```c
    #include <stdio.h>
    int main(void){
      int array[2][3] = {10, 20, 30, 40, 50, 60};
      int* p = NULL;

      p = array;

      printf("-----------------\n");
      printf("%x %x %x \n", &p[0], &p[1], &p[2]); // 1행의 주소 출력
      printf("%x %x %x \n", &p[3], &p[4], &p[5]); // 2행의 주소 출력

      printf("-----------------\n");
      printf("%d %d %d \n", p[0], p[1], p[2]);   // 10 20 30 출력
      printf("%d %d %d \n", p[3], p[4], p[5]);   // 40 50 60 출력

      return 0;
    }
    ```
      - 포인터 변수로 2차원 배열에 접근할 때 `p[i] == *(p+i)`이다.
      - 1차원 포인터 변수 p에 2차원 배열의 시작 주소를 저장해서 **p[0], p[1], ... 와 같이 1차원 배열처럼 접근했다.**
      - 1차원 포인터 변수 p를 이용해서 2차원 배열처럼 접근할 수는 없을까?
        ```c
        #include <stdio.h>
        int main(void){
          int array[2][3] = {10, 20, 30, 40, 50, 60};
          int* p = NULL;

          p = array;

          printf("%d %d %d \n", p[0][0], p[0][1], p[0][2]); // 에러
          printf("%d %d %d \n", p[1][0], p[1][1], p[1][2]); // 에러
          return 0;
        }

        ```
          - 이 문제를 해결하는 방법은 **배열 포인터 변수**를 사용하는 것이다.
  - **배열 포인터 변수** : 배열을 가리키는 포인터 변수
  - 배열 포인터 변수 선언
    ```c
    int (*p) [3];
    ```
      - 자료형 : 배열 포인터 변수가 저장하는 배열의 자료형
      - 배열 포인터 변수 이름 : `*` 연산자와 배열 포인터 변수 이름을 함께 **괄호로 묶음**
      - 열의 길이 : 배열 포인터 변수가 가리키는 **배열의 열의 길이를 지정**
  ```c
  #include <stdio.h>
  int main(void){
    int array[2][3] = {10, 20, 30, 40, 50, 60};
    int (*p) [3] = NULL;

    p = array;

    printf("%d %d %d \n", p[0][0], p[0][1], p[0][2]);
    printf("%d %d %d \n", p[1][0], p[1][1], p[1][2]);

    return 0;
  }
  ```
  - **3열짜리 2차원 배열의 주소를 저장할 수 있는 배열 포인터** 변수 p를 선언
## 13.3 포인터 배열
  - 포인터 배열의 선언과 필요성
    - 포인터 배열 : **주소를 저장**하는 배열
      ```c
      int* pointer[3];
      ```
      - 자료형 : 포인터 배열의 자료형을 지정, 자료형 다음에 **`*`연산자**를 붙임
      - 포인터 배열 이름 : 주소를 저장할 배열의 이름을 지정
      - 배열 길이 : 주소를 저장할 배열의 전체 길이를 지정
  ```c
  #include <stdio.h>
  int main(void){
    int a = 10, b = 20, c = 30;
    int* ap[3] = {NULL, NULL, NULL};

    ap[0] = &a;
    ap[1] = &b;
    ap[2] = &c;

    printf("%x %x %x \n", &a, &b, &c);
    printf("%x %x %X \n", ap[0], ap[1], ap[2]);
    printf("%x %x %x \n", *(ap + 0), *(ap + 1), *(ap + 2));
    printf("---------------------------\n");

    printf("%d %d %d \n", *&a, *&b, *&c);
    printf("%d %d %d \n", *ap[0], *ap[1], *ap[2]);
    printf("%d %d %d \n", **(ap + 0), **(ap + 1), **(ap + 2));

    return 0;
  }
  ```
  - *(ap + i) == ap[i]
  - **포인터 배열**과 **배열 포인터 변수**의 차이
    - 배열 포인터 : int (*p)[3] = NULL;
      - 배열 포인터 변수 p는 3열짜리 2차원 배열의 주소를 저장할 수 있는 변수
    - 포인터 배열 : int* p[3] = {NULL, NULL, NULL};
      - 괄호가 생략되어 있으며, 주소를 저장할 수 있는 배열

## 13.4 포인터와 문자 그리고 포인터와 문자열
  - 문자 배열과 포인터
    - 포인터 변수와 배열의 관계는 포인터 변수에 배열의 주소를 저장하는 방법을 통해 이루어짐
    - 마찬가지로 포인터 변수를 통해 **문자 배열에 접근 가능**
    ```c
    #include <stdio.h>
    int main(void){
      char array1[] = {'A', 'B', 'C', 'D'};
      char* p = NULL;

      p=array1;

      printf("%c %c %c %c \n", p[0], p[1], p[2], p[3]);
      printf("%d %d %d %d \n", p[0], p[1], p[2], p[3]);

      printf("%c %c %c %c \n", *(p + 0), *(p + 1), *(p + 2), *(p + 3));
      printf("%d %d %d %d \n", *(p + 0), *(p + 1), *(p + 2), *(p + 3));

      return 0;
    }
    ```
  - 문자열과 널문자
    - 문자열 : ""(큰따옴표) 내에 포함되 하나 이상의 문자를 의미
    - 문자열의 맨 끝에는 문자열을 알리는 종료문자(`\0`)이 삽입. 이 종료문자를 **널문자**라고 한다
  - 문자열의 종류
    - 문자열 상수 : 변경이 불가능한 문자열
    - 문자열 변수 : 변경이 가능한 문자열
  - 문자열을 변경하고 싶다면 배열에 문자열을 저장하는 **문자열 배열**을 만들면 된다.
- 문자열 배열
  ```c
  #include <stdio.h>
  int main(void){
    char array[] = "ABCD";

    printf("%c %c %c %c %c \n", array[0], array[1], array[2], array[3], array[4]);

    printf("%d %d %d %d %d \n", array[0], array[1], array[2], array[3], array[4]);

    printf("%d \n", sizeof(array));

    return 0;
  }
  ```
    - %c로 출력하면 array[4]에 저장된 **널문자도 출력**하지만 **공백 문자로 실제로 보이지는 않는다.**
    - %d로 출력하면 array[4]에 저장된 널문자를 10진수 **0으로 출력**한다.
    - 문자열의 크기는 **널문자를 포함**한 5바이트이다.
 
---

# 14. 포인터와 함수 그리고 void형 포인터
## 14.1 포인터와 1차원 배열
  - 값에 의한 호출(Call by Value)
    - **변수의 값을 복사**해서 함수를 호출하는 방식
      ```c
      #include <stdio.h>

      int func(int i);

      int main(void){
        int a = 10;
        int result = 0;

        result = func(a);
        printf("%d \n", result);
        printf("%d \n", a);

        return 0;
      }

      int func(int i){
        i++;
        return i;
      }
      ```
      - 변수 i가 생성되고 변수 a의 값이 복사된다.
      - 변수 i의 값이 result로 반환되고 func() 함수는 종료
      - 변수 i는 func()함수의 지역변수이므로 변수 i의 **메모리 공간도 소멸**
      - 변수 a와 변수 i는 서로 다른 메모리 공간을 가지므로 변수 i의 값이 변하더라도 변수 a의 값에는 변화가 없다.
  - 주소에 의한 호출(Call by Reference)
    - 메모리 공간의 **주소를 참조**하여 호출
      ```c
      #include <stdio.h>

      int func(int* i);

      void main(void){
        int a = 10;
        int result = 0;

        result = func(&a);
        printf("%d \n", result);
        printf("%d \n", a);

        return 0;
      }

      int func(int* i){
        *i = *i + 1;
        return *i;
      }
      ```
      - 변수 a의 주소로 func() 함수 호출
      - 포인터 변수 i가 생성되고 포인터 변수 i에 &a가 저장
      - *i가 호출된 곳으로 반환
      - func() 함수가 종료되면 포인터 변수 i는 매개변수이므로 i의 메모리 공간은 소멸
      - 변수 a의 주소를 저장한 포인터 변수 i를 이용해 변수 a에 저장된 값을 참조하거나 변경 가능
  - **배열 포인터**를 이용한 주소에 의한 호출
      ```c
      #include <stdio.h>

      void func(int (*p)[4], int num1, int num2);

      int main(void){
        int array[2][4] = {10, 20, 30, 40, 50, 60, 70, 80};
        func(array, sizeof(array)/16, sizeof(array)/8);
        return 0;
      }

      void func(int (*p)[4], int num1, int num2){
        int i, j;
        for(i = 0; i < num1; i++){
          for(j = 0; j < num2; j++){
            printf("%d ", p[i][j]);
          }
          printf("\n");
        }
      }
      ```
      - 배열 포인터 변수 p는 길이가 4열인 2차원 배열의 주소를 저장하는 포인터 변수

## 14.2 주소를 반환하는 함수
  - 주소 반환의 필요성과 주의 사항
    - 지금까지 공부한 함수의 반환 형태는 **대부분 값을 반환하는 형태**였다.
    - 만약 배열이나 문자열과 같이 **대량의 데이터를 반환할 때**는 어떻게 해야하나?
    - 이럴 때 필요한 것이 **주소를 반환하는 함수**
    - 하지만 주소를 반환하는 함수를 다룰 경우 주의할 사항이 있다.
    - **지역 변수의 주소를 반환**하면 경고가 발생한다.
    - 함수가 종료되면서 지역 변수가 소멸되기 때문에
      ```c
      #include <stdio.h>

      int* input();

      int main(void){
        int* p = NULL;

        p = input();
        printf("%d \n", *p);

        return 0;
      }

      int* input(){
        int num1;
        //static int num1;  num1 변수를 정적 변수로 선언
        scanf("%d", &num1);
        return &num1;
      }
      ```
      - 지역 변수 num1은 input()함수가 종료되면서 메모리 공간이 소멸되기 때문에 경고가 발생
      - 결과값이 정상적으로 나올 수도 있고 알 수 없는 값이 나올 수도 있다.
      - 이 문제를 해결하기 위해 **정적 변수**를 사용한다.
      - 정적 변수는 함수가 종료된 후에도 메모리 공간이 소멸되지 않고 남아 있음

## 14.3 void형 포인터란
  - void형 포인터는 **자료형이 없는 포인터**
  - 자료형에 제약을 받지 않고, **아무 자료형의 주소라도 저장 가능한 포인터 변수**
    ```c
    #include <stdio.h>

    int main(void){
      char c = 3;
      double d = 3.1;

      void* vx = NULL;

      vx = &c;
      printf("vx의 주소 값 : %x \n", vx);
      // printf("vx의 값 : %d \n", *vx);    // 에러
      // printf("vx의 값 : %d \n", *(char*)vx);    // void형 포인터 강제 형변환

      vx = &d;
      printf("vx의 주소 값 : %x \n", vx);
      // printf("vx의 값 : %lf \n", *vx);    // 에러
      // printf("vx의 값 : %lf \n", *(double*)vx);    // void형 포인터 강제 형변환

      return 0;
    }
    ```
    - void형 포인터 변수는 다양한 자료형의 주소를 저장가능
    - 하지만 **주소를 저장하는 것만** 가능한 포인터 변수
    - void형 포인터 변수를 이용하여 값을 **참조, 저장하거나 변경할 수는 없음**
    - **강제 형변환**을 하여 포인터 변수의 자료형을 변경 후, 포인터 변수를 이용한 값 참조가 가능

 
---

# 15. 구조체와 공용체란 무엇인가
## 15.1 구조체란
  - **하나 이상의 변수를 묶어 그룹화**하는 사용자 정의 자료형
    - **같은 자료형**의 변수들로 그룹화 가능
    - **서로 다른 자료형**의 변수들로 그룹화 가능
  - 구조체 정의
    ```c
    struct point // 구조체 키워드와 구조체 이름
    {
      int x, y; // 멤버변수
    };
    ```
    - 구조체 키워드 : 구조체의 시작을 알리는 `struct` 키워드 지정
    - 구조체 이름 : 구조체를 구분하는 이름
    - 멤버 변수 : 구조체를 구성하는 구조체 멤버 변수의 이름

  - 구조체 변수
    - **구조체 멤버 변수에 접근**하기 해주는 변수
    - 구조체 정의와 선언을 동시에 가능
    ```c
    struct point
    {
      int x, y;
    } p1, p2, p3; // 구조체 정의와 선언 동시에 하는 방법
    ```
    - 구조체 정의와 구조체 변수 선언 따로 가능
      ```c
      #include <stdio.h>

      struct point
      {
        int x, y;
      };

      int main(void)
      {
        struct point p1, p2, p3; // 구조체 변수를 개별적으로 선언하는 방법

        return 0;
      }
      ```
  - 구조체 변수로 멤버 변수에 접근
    - 구조체 변수로 멤버 변수에 접근하기 위해서 **접근(.) 연산자** 사용
    ```c
    g1.a;
    ```
    - 구조체 변수 : 멤버 변수에 접근하게 해주는 구조체 변수의 이름을 지정
    - 접근 연산자 : 구조체 변수로 멤버 변수에 접근하기 위해 연산자를 지정
    - 멤버 변수 : 접근하려는 멤버 변수의 이름을 지정
  - 구조체 변수의 초기화
    ```c
    #include <stdio.h>

    struct point
    {
      int x, y;
    };

    int main(void)
    {
      struct point p1 = {10, 20};
      struct point p2;  // 구조체 선언과 초기화를 따로하면 에러 발생
      p2 = {10, 20};    // 에러
      // 에러를 해결하기 위해서 구조체 변수로 멤버변수에 접근하여 초기화를 해야한다.
      p2.x = 10;
      p2.y = 20;
    }
    ```
    - 중괄호를 이용해서 구조체 변수 p1을 **선언하고 동시에 초기화**
  - 구조체 변수의 복사
    ```c
    #include <stdio.h>
    
    struct point
    {
      int x, y;
    };

    int main(void)
    {
      struct point p1 = {10, 20};
      struct point p2  ={0, 0};

      p2 = p1;    // 구조체 p2에 p2을 복사

      return 0;
    }
    ```
    - 변수 간에 복사가 가능한 것처럼 **구조체 변수도 서로 복사가 가능**
    - 구조체 변수 간에 **사칙연산은 불가능**, 오직 대입 연산만 가능

## 15.2 중첩 구조체
  - 중첩 구조체의 초기화
    ```c
    #include <stdio.h>
    
    struct score
    {
      double math;
      double english;
      double total;
    };

    struct student
    {
      int no;
      struct score s;
    };

    int main(void)
    {
      struct student stu1 ={20101323, {90, 80, 0}}; // 중괄호로 중첩 구조체의 범위를 지정하여 초기화
      struct student stu2 ={20101434, 70, 100, 20}; // 중괄호를 생략할 수도 있다.

      return 0;
    }
    ```

## 15.3 구조체와 배열
  - 맴버 변수로 배열 사용하기
    ```c
    #include <stdio.h>

    struct student
    {
      char no[10];
      char name[20];
      double math;
      double english;
      double total;
    };

    int main(void)
    {
      struct student stu = {"20101323", "Park", 80, 80, 0};
      return 0;
    }
    ```
  - 구조체 변수로 배열 사용하기
    ```c
    #include <stdio.h>

    struct student
    {
      char no[10];
      char name[20];
      double math;
      double english;
      double total;
    };

    int main(void)
    {
      struct student stu[3] = {
        {"20101323", "Park", 80, 80, 0},
        {"20101324", "Kim", 95, 85, 0},
        {"20101325", "Lee", 100, 90, 0},
      }

      return 0;
    }
    ```
    - 많은 수의 구조체 변수를 다룰 경우 **구조체 변수로 배열**을 사용한다

## 15.4 구조체와 포인터
  - 멤버 변수로 포인터 사용하기
    ```c
    #include <stdio.h>

    struct point
    {
      int* x;
      int* y;
    };

    int main(void)
    {
      int num1 = 4, num2 = 5;
      struct point p1;
      p1.x = &num1;
      p1.y = &num2;
    }
    ```
    - 포인터 변수의 시작주소와 포인터 변수의 첫번째 멤버변수의 시작주소는 같음
  - 구조체 변수로 포인터 사용하기
    ```c
    #include <stdio.h>

    struct student
    {
      char no[10];
      char name[20];
      double total;
    };

    int main(void)
    {
      struct student stu = {"20101323", "Park", 160};
      struct student* p = NULL;

      p = &stu;
      printf("%s %s %lf \n", stu.no, stu.name, stu.total);
      printf("%s %s %lf \n", (*p).no, (*p).name, (*p).total);
      printf("%s %s %lf \n", p->no, p->name, p->total);

      return 0;
    }
    ```
  - 자기 참조 구조체와 외부 참조 구조체
    ```c
    #include <stdio.h>

    struct student
    {
      char name[20];
      int money;
      struct student* link;
    };

    int main(void)
    {
      struct student stu1 = {"Kim", 90, NULL};
      struct student stu2 = {"Lee", 80, NULL};
      struct student stu3 = {"Goo", 60, NULL};

      stu1.link = &stu2;
      stu2.link = &stu3;

      printf("%s, %d \n", stu1.name, stu1.money);
      printf("%s, %d \n", stu1.link->name, stu1.link->money);
      printf("%s, %d \n", stu1.link->link->name, stu1.link->link->money);
      printf("%s, %d \n", (*stu1.link).name, (*stu1.link).money);

      return 0;
    }
    ```

## 15.5 구조체와 함수
  - 구조체를 함수의 인자로 전달하기
    - 값에 의한 호출
      ```c
      #include <stdio.h>

      struct point
      {
        int x, y;
      };

      void function(struct point call);

      int main(void)
      {
        struct point p = {10 ,20};
        function(p);    // 값에 의한 호출

        return 0;
      }
      // 매개 변수 call에 구조체 변수 p가 복사
      void function(struct point call)
      {
        printf("%d %d \n", call.x, call.y);
      }
      ```
    - 주소에 의한 호출
      ```c
      #include <stdio.h>

      struct point
      {
        int x, y;
      };

      void function(struct point* call);

      int main(void)
      {
        struct point p = {10, 20};
        function(&p); // 주소에 의한 호출

        return 0;
      }

      // p의 주소가 매개 변수 call에 저장
      void function(struct point* call)
      {
        printf("%d %d \n", call->x, call->y);
        printf("%d %d \n", (*call).x, (*call).y);
      }
      ```

## 15.6 공용체와 열거형
  - 공용체
    - 그룹으로 묶어진 여러 개의 멤버 변수들 중에 **가장 큰 메모리 공간을 공유**해서 사용하는 것
      ```c
      #include <stdio.h>

      union point
      {
        int x, y;
      };

      struct student
      {
        int a, b;
      };

      int main(void)
      {
        printf("%d %d \n", sizeof(union point), sizeof(struct student));
        return 0;
      }
      ```
    
---

# 16. 문자열 표준 함수와 기타 표준 함수
## 16.1 문자열 처리함수
  - gets() 와 puts()

    함수의 원형|예|설명
    -|-|-
    char* gets(char* s);|char array[10];<br>gets(array);|전달된 메모리 주소에 **문자열 저장**<br>성공 : 입력된 문자열 반환<br>실패 : NULL 포인터 반환
    int puts(const char* s);|char array[10] = "Good luck";<br>puts(array);|전달된 메모리 주소의 **문자열 출력**<br>성공 : 0이 아닌 값 반환<br>실패 : EOF 반환

    - gets() 함수는 함수의 인자로 전달받은 메모리 주소에 문자열을 입력
    - 마지막으로 입력된 Enter키는 자동으로 제거하고 **문자열 끝에 종료문자(NULL 문자)를 붙여준다.**
    - gets() 함수를 사용할 때 메모리 오버플로우가 발생하지 않게 문자열의 크기를 고려해야 한다.
    - puts() 함수를 사용하여 문자열을 출력하는 경우 자동으로 **개행문자가 삽입된다**
      ```c
      #include <stdio.h>

      int main(void)
      {
        char array1[20];
        char array2[20];

        gets(array1);
        puts(array1);

        scanf("%s", array2);
        printf("%s \n", array2);

        return 0;
      }
      ```
      - scanf() 함수를 사용해 입력을 받으면 공백을 종료문자로 인식한다.
      - 하지만 gets() 함수는 공백을 문자로 인식하고 문자열에 추가한다.
  - strlen()

      함수의 원형|예|설명
    -|-|-
    size_t strlen(const char* s);|char array[10] = "Good luck";<br>strlen(array);|전달된 메모리 주소로부터<br> 종료 문자를 만날때까지 <br>저장된 문자열의 길이를 반환

    - 문자열의 끝을 나타내는 **종료 문자는 길이에 포함되지 않음**
      ```c
      #include <stdio.h>
      #include <string.h>

      int main(void)
      {
        char array1[] = "abcdef";
        char array2[] = "가나다라";

        printf("%d \n", strlen(array1));  // 6출력
        printf("%d \n", strlen(array2));  // 8출력

        printf("%d \n", sizeof(array1));  // 7출력
        printf("%d \n", sizeof(array2));  // 9출력
      }
      ```
      - 영문은 한글자 당 1바이트, 한글은 한글자 당 2바이트이므로 문자열 길이가 다르다
      - sizeof() 함수는 **종료문자를 포함한 문자열의 길이를 반환한다.**
  - srtcpy()와 strcpy()

    함수의 원형|예|설명
    -|-|-
    char* strcpy(char* dest,<br> const char*src);|char array1[10] = "Good luck";<br>char array2[10];<br>strcpy(array2, array1);|array1의 문자열을 array2에 복사<br>성공 : 복사된 문자열의 시작주소 반환
    char* strncpy(char* dest,<br> const char*src, size_t n);|char array1[10] = "Good luck";<br>char array2[10];<br>strncpy(array2, array1, 3);|array1의 문자열을 array2에 3바이트만큼 복사<br>성공 : 복사된 문자열의 시작주소 반환

    - strcpy(), strncpy() 함수는 문자열을 복사
    - 두 번째 인자로 전달받은 메모리 주소에 저장된 문자열을 첫 번째 인자로 전달받은 메모리 주소에 복사
    - strncpy()의 세 번째 인자는 **복사할 크기를 나타냄**
      ```c
      #include <stdio.h>
      #include <string.h>

      int main(void)
      {
        char array1[6] = "Hello";
        char array2[3];

        strncpy(array2, array1, 3);
        array2[2] = '\0'; // 종료문자 삽입

        puts(array2);

        return 0;
      }
      ```
  - strcat()과 strncat()

    함수의 원형|예|설명
    -|-|-
    char* strcat(char* dest,<br> const char*src);|char array1[10] = "Good";<br>char array2[5] = "luck";<br>strcat(array1, array2);|array1에 array2 문자열을 결합<br>성공 : 결합된 문자열의 시작주소 반환
    char* strncat(char* dest,<br> const char*src, size_t n);|char array1[10] = "Good";<br>char array2[5] = "luck";<br>strcat(array1, array2, 3);|array1에 array2 문자열을 3바이트만큼 결합<br>성공 : 결합된 문자열의 시작주소 반환 

    - strcat()과 strncat()함수는 문자열을 결합한다.
    - strncat() 함수의 세 번째 인자는 **결합해야 할 크기를 나타냄**
    - 결합할 때는 array1의 **문자열 맨끝에 있는 종료문자가 생략**되고 array2의 문자열이 붙는다.
  - strcmp()와 strncmp()

    함수의 원형|예|설명
    -|-|-
    int strcmp(const char* s1, <br>const char* s2);|char array1[10] = "Good";<br>char array2[5] = "luck";<br>strcmp(array1, array2);|array1의 문자열과 array2의 문자열을 비교
    int strncmp(const char* s1, <br>const char* s2, size_t n);|char array1[10] = "Good";<br>char array2[5] = "luck";<br>strcmp(array1, array2, 3);|array1의 문자열과 array2의 문자열을 3개까지 비교  

    - 문자들의 ASCII 코드값을 비교한다.
    - 반환값이 양수이면 array1이 array2보다 사전순으로 뒤
    - 반환값이 음수이면 array1이 array2보다 사전순으로 앞
    - 반환값이 0이면 같은 문자열

# 16.2 문자열 처리함수 2
  - strchr()와 strstr()

    함수의 원형|예|설명
    -|-|-
    char* strchr(const char* s,<br> int c);|char array1[10] = "Good";<br>strchr(array1, 'd');|array1에서 문자 d의 메모리 주소를 검색 <br>성공 : 찾은 문자의 메모리 주소를 반환<br>실패 : 0 리턴
    char* strstr(const char* s1,<br> const char* s2);|char array1[10] = "Good-morning";<br>char array2[10]="morning";<br>strstr(array1, array2);|array1에서 array2에 저장된 문자열을 검색 <br>성공 : 찾은 문자열의 메모리 주소를 반환<br>실패 : 0 리턴
        
---

# 17. 콘솔 입출력과 파일 입출력
## 17.1 문자열 처리함수
  - 스트림
    - 데이터를 입력하고 출력하기 위한 다리
    - 키보드로 데이터를 입력하려면 **표준 입력 스트림**이 필요
    - 모니터로 데이터를 출력하려면 **표준 출력 스트림**이 필요

      스트림|설명|장치
      -|-|-
      stdin|표준 입력을 담당|키보드
      stdout|표준 출력을 담당|모니터
      stderr|표준 에러를 담당|모니터
    
    - 운영체제는 stdin, stdout, stderr로 키보드와 모니터를 연결하기 위해 **프로그램 시작 시 스트림을 생성하고, 프로그램 종료 시 스트림을 소멸**
  - 버퍼와 버퍼링
    - 버퍼 : 처리할 데이터를 **임시로 저장**하는 저장소
    - 입력 버퍼와 출력 버퍼를 사용하는 함수들이 **표준 입출력 함수**
    - 버퍼의 종류
      - 입력버퍼 : 입력 데이터를 저장하기 위한 버퍼
      - 출력버퍼 : 출력 데이터를 저장하기 위한 버퍼
    - 키보드 -> 입력 스트림 -> 입력 버퍼
    - 출력 버퍼 -> 출력 스트림 -> 모니터
  - 콘솔 입출력
    - 키보드 : 콘솔 입력 장치
    - 모니터 : 콘솔 출력 장치
    - 콘솔 입출력 함수 == 표준 입출력 함수