---
layout: post
title:  "C언어 본색 정리"
date:   2019-11-11 11:45:02 +0900
---

# 2. C언어의 기본 구조와 표준 입출력
## 2.1 C언어의 기본 구조
  ```c
  #include <stdio.h>

  int main(void){
    printf("Hello C world \n");
    return 0;
  }
  ```
  - 전처리기(Proprocessor)
    - 컴파일러가 컴파일을 수행하기 전에 **먼저** 처리한다.
  - 헤더 파일
    - 확장자 H를 갖는 파일
    - **표준 라이브러리 함수들의 동작을 정의해 놓은 파일**
  - main() 함수
    - 프로그램이 실행될 때 **가장 먼저** 호출되고 **가장 나중에** 종료되는 함수
    - 운영체제가 호출
      - 소스 파일을 컴파일하고 링크해서 만든 실행파일을 실행하면 운영체제가 실행파일 내의 main()함수를 가장 먼저 호출하기로 약속되어 있음
    - C언어로 작성된 프로그램은 **main()함수를 반드시 가지고 있음**
    - 함수의 기능은 **중괄호 안**에 작성한다.
    - 세미콜론은 연산을 수행하는 **문장이 끝남을 의미**
    - return은 **반환**과 **종료**의 의미를 가짐
      - 함수를 호출한 영역으로 값을 반환
      - main()함수를 종료

## 2.2 printf() 함수
  ```c
  #include <stdio.h>
  int main(void){
    printf("%d 더하기 %d는 %d입니다. \n", 3, 5, 3 + 5);
    printf("%i 더하기 %i는 %i입니다. \n", 3, 5, 3 + 5);
  }
  ```
  - printf() 함수는 숫자들의 계산, 10진수 정수, 8진수 정수, 16진수 정수, 실수, 문자, 문자열 등을 출력

    서식문자|출력형태
    -------|--------
    %d, %i|10진수 정수(양수, 음수 모두 가능)
    %x, %o|16진수 정수, 8진수 정수(양수만 가능)
    %f, %lf|10진수 실수(양수, 음수 모두 가능)
    %c|한 개의 문자
    %s|문자열
    %u|10진수 정수(양수만 가능) %d의 두배 범위
    %e, %E|e표기법, E표기법에 의한 실수
    %g, %G|소수점 이하 자리수에 따라 %f, %e 둘중 선택
    %%|% 기호 출력

## 2.3 scanf() 함수
  - 표준입력 : 키보드로부터 데이터를 입력받는 것
  - 표준출력 : 데이터를 모니터로 출력하는 것
  - scanf()함수는 키보드로 데이터를 입력받을 수 있는 함수
  ```c
  #include <stdio.h>

  int main(void){
    int age;
    scanf("%d", &age);
    printf("your age is %d", age);
    return 0;
  }
  ```
---

# 3. 변수란 무엇인가?
## 3.1 변수 선언하기
  - 변수 : 데이터를 저장하는 **메모리 공간**
  - 데이터를 저장하기 위해서는 반드시 **변수(메모리 공간)이 필요**
  - 변수의 형태
    - 정수형 변수 : char형, short형, int형, long형
    - 실수형 변수 : float형, double형, long double형
  - 변수는 언제든지 **다른 데이터로 변경**될 수 있다.

## 3.2 변수 선언 시 주의 점
  - C언어에서 변수를 선언할 경우, 함수의 맨 처음에서 해야 한다.
  - 특수기호, 공백문자, 변수 이름 맨 처음에 숫자를 사용하면 안됨
  - C언어는 **대소문자를 구분**

## 3.3 변수의 시작 주소와 & 연산자
  - 특정 변수가 메모리 공간의 어디에 있는지를 가리키는 것을 **변수의 시작 주소**라고 한다.
  - C언어에서는 **&연산자**를 사용하면 변수의 시작 주소를 알 수 있음

  ```c
  #include <stdio.h>

  int main(void) {
    int a = 3;
    int b = 4;

    printf("a의 값 : %d \n", a);
    printf("b의 값 : %d \n", b);

    printf("변수 a의 시작 주소 : %x \n", &a);
    printf("변수 b의 시작 주소 : %x \n", &b);
    
    return 0;
  }
  ```

---
# 4. 상수란 무엇인가?
## 4.1 상수란?
  - 상수 : 프로그램 실행 도중 **값이 변경되지 않는 데이터**
  - 상수의 형태
    - 리터럴 상수 : 글자 그대로 의미가 있어서 이름이 없는 상수
      - 정수형 상수, 실수형 상수, 문자 상수, 문자열 상수
    - 심볼릭 상수 : 상수를 기호화하여 변수처럼 이름을 지어 쓰는 상수
      - 변수를 상수화하는 것

## 4.2 리터럴 상수
  ```c
  #include <stdio.h>
  
  int main(void){
    printf("10진수 정수형 상수 %d + %d = %d \n", 10, 20, 10 + 20);
    printf("16진수 정수형 상수 %x + %x = %x \n", 0x10, 0x20, 0x10 + 0x20);
    printf("8진수 정수형 상수 %o + %o = %o \n", 010, 020, 010 + 020);

    return 0;
  }
  ```
  - 정수형 상수 : 소수점이 포함되지 않은 상수

  ```c
  #include <stdio.h>

  int main(void){
    printf("실수형 상수 %lf + %lf = %lf입니다. \n", 3.1, 4.1, 3.1+ 4.1);

    return 0;
  }
  ```
  - 실수형 상수 : 소수점이 포함된 상수
  - 문자 상수 : **작은따옴표**로 묶은 문자 한개
  - 문자열 상수 : **큰따옴표**로 묶은 문자열
    - 컴파일러는 큰따옴표로 묶은 문자열 상수를 저장할 때 문자열 상수 끝에 문자열의 끝을 알리는 종료문자 **\0**을 자동으로 추가하는데 이것을 **NULL문자**라고 함
  
## 4.3 심볼릭 상수
  - 심볼릭 상수를 만드는 방법
    ```c
    #include <stdio.h>
    
    #define PI 3.14

    int main(void){
      const int NUM = 100;

      return 0;
    }
    ```
    - `const` 키워드 사용
    - `#define` 문 사용
    - 심볼릭 상수는 반드시 선언과 초기화를 동시에 해야한다.
    - #define 문은 전처리기에서 수행되는 문장으로 소스를 컴파일하기 전에 먼저 수행
