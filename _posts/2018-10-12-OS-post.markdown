---
layout: post
title:  "운영체제 정리"
date:   2018-10-12 19:51:02 +0900
---

### 1. 운영체제 서론
	* PC 안에는 운영체제가 설치되어 있음
	* 운영체제가 설치되어 있지 않는 PC는 야생마
	* 사용자가 원하는데로 제어가 불가능
	* 운영체제가 없으면 원하는 프로그램을 메모리에 올려서 실행하는것이 불가능

	* 운영체제란?
		1) 컴퓨터 하드웨어를 잘 관리하여
		2) 성능을 높이고
		3) 사용자에게 편의성 제공
		4) 컴퓨터 하드웨어를 관리하는 프로그램

	* 부팅이란?
		1) 전원을 껐다 키면 RAM의 내용은 모두 사라진다
		2) ROM은 전원을 꺼도 유지된다
		3) 컴퓨터가 전원을 키면 프로세스는 먼저 ROM의 코드를 읽어서 실행
		4) ROM안의 POST(Power On Self Test)가 실행 : 컴퓨터의 상태를 체크하는 코드(ROM은 부팅시에만 역할을 한다)
		5) Boot Loader(ROM에 위치) : 하드디스크 안에 저장된 운영체제를 찾아 메인 메모리의 RAM에 올린다
		6) 운영체제가 RAM에 올라온 상태가 되면 사용자가 원하는 상태로 제어할 수 있는 준비가 된다(OS는 전원을 끄기 전까지는 RAM에 상주한다)

	* OS를 다른 방식으로 본다면?
		1) 커널 vs 쉘  		
		  +---------------------+    
      |     Application     |    
      |  +--------------+   |    
		  |  |       OS     |   |  
		  |  | +---------+  |   |  
		  |  | |  H/W    |  |   |  
		  |  | +---------+  |   |  
      |  +--------------+   |  
		  +---------------------+  


		 2) OS = 커널 + 쉘  
			- 커널 : 실제로 컴퓨터를 관리하는 코어 프로그램
			- 쉘(명령 해석기) : 오에스의 바깥부분에 위치, 사용자로부터 명령을 받고 해석하고 명령을 실행
			- 운영체제 과목에서는 커널을 공부

	* OS의 관리 부분
		1) 프로세스 관리(중요)
		2) 메모리 관리(중요)
		3) 파일 관리
		4) 입출력 관리
		5) 네트워크 관리
		6) 보안 관리


---


### 2. 운영체제 역사
	* Batch processing system(일괄처리)
		1) 최초의 운영체제
		2) 컴파일, 링크, 로딩 등과 같은 과정을 프로그래밍 하여 한번에 처리하는 시스템

	* Multiprogramming system(다중프로그래밍)
		1) Batch processing system는 한번에 하나의 프로그램만 실행가능
		2) CPU가 계산을하고 입출력 장치에서 처리하는 동안 CPU는 아무일을 하지 않는다
		3) 느린 입출력장치의 속도를 기다리는 것은 비싼 CPU를 낭비
		4) 메모리에 여러개의 프로그램을 올리는 방식을 고안
		5) 첫 프로그램에서 계산을 하고 입출력 장치를 처리하는 동안 CPU는 가만히 있지 않고 다음 프로그램의 계산을 실행
		6) CPU를 낭비하지 않는다

	* Time-sharing system(시공유 시스템)
		1) interactive system(대화형) : 키보드, 모니터와 같은 입출력 장치의 발명으로 컴퓨터와 즉각적으로 상호작용 가능
		2) 메인 프레임 컴퓨터를 한번에 여러 사람이 단말기를 통해 동시에 사용하기 위해 아주 작은 시간동안 메인 프레임의 CPU가 여러 프로그램을 나누어서 번갈아가며 실행
		3) CPU의 속도가 아주 빠르기 때문에 단말기를 사용하는 사람은 컴퓨터를 단독으로 사용하는 것처럼 불편없이 원하는 작업을 할 수 있다
		3) 가상메모리 : 하드디스크의 일부를 메인메모리처럼 사용하는 기술
		4) Unix, Linux, Windows, Mac OS 등 현대의 대부분의 OS는 Time sharing system이다

	* OS 기술 천이
		1) Supercomputer > Server > Workstation > PC > Handheld > Embedded
		2) OS 기술이 Handheld/Embedded까지 적용

	* 고등운영체제
		1) 다중 프로세서 시스템(Multiprocessor system)
			성능향상 : 프로세서 여러개를 사용하므로
			비용절감 : 고성능 1개의 CPU를 사용하는 것보다 중사양의 CPU를 여러가 사용하는 것이 비용면에서 유리
			신뢰성 : 1개의 CPU가 고장나더라도 다른 CPU로 작업 가능
		2) 분산 시스템(Distributed system)
		3) 실시간 시스템(Real time system)
			어떤 계산이 특정한 시간내에 반드시 완료되어야 하는 시스템에 사용
			공장 자동화, 군사, 항공, 우주


---


### 3. 인터럽트 기반 시스템
	* 인터럽트
		1) 현대 운영체제는 인터럽트 기반 시스템!
		2) 부팅이 끝나면 운영체제는 메모리에 상주
		- 하드웨어 인터럽트
			3) 키보드, 마우스 등의 입력이 발생하면 입력에 대한 전기신호를 하드웨어 인터럽트에서 받아서
			4) CPU는 현재 수행하던 작업을 멈추고 운영체제 내의 특정 코드 실행(ISR)
			5) Interrupt Service Routine 종료 후 다시 대기
		- 소프트웨어 인터럽트
			3) 사용자 프로그램이 실행되면서 소프트웨어 인터럽트도 있음
			4) 예를들어 워드프로그램에서 하드에 있는 문서를 읽고 싶다면
			5) 워드프로그램이 인터럽트를 실행되면 현재 수행하던 작업을 멈추고
			6) OS내의 하드디스크를 읽어오는 특정코드가 실행(ISR)
			7) ISR가 실행되어 메모리에 문서를 올리면 종료 후 다시 사용자 프로그램으로 복귀

	* 인터럽트 기반 운영체제
		1) 운영체제는 평소에는 대기 상태
			- 하드웨어 인터럽트, 소프트웨어 인터럽트, 내부 인터럽트에 의해 동작 수행
		2) ISR이 종료되면 원래의 대기상태 또는 사용자 프로그램으로 복귀
		3) 현재 운영체제는 인터럽트기반의 운영체제, 운영체제는 여러 코드들의 모음, 평소에는 작동하지 않고 인터럽트가 걸릴 때 작동
		4) 하나의 프로그램이 실행되는 경우 동작을 보면 인터럽트가 걸리면서 OS로 갔다가 다시 프로그램으로 갔다가를 반복하면 원하는 기능을 수행한다

	* 이중모드
		1) 한 컴퓨터를 여러 사람이 동시에 사용하는 환경은 한 사람의 고의/실수가 프로그램 전체에 영향
		2) 사용자 프로그램은 STOP 등 치명적 명령 사용을 불가하게 함
			- 사용자(user)모드 vs 관리자(supervisor)모드
			- 이중모드
			- 관리자 모드 = 시스템 모드 = 모니터 모드 = 특권 모드
		3) 특권 명령(privileged instructions)
			- STOP, HALT, RESET, SET_TIMER, SET_HW, .....
			- 일반 유저가 특권 명령을 실행한다면 CPU는 소프트웨어 인터럽트를 실행하여 특권 명령을 실행한 일반 프로그램을 종료시킨다
		4) 이중 모드
			- 레지스터에 모드를 나타내는 플래그(flag)가 존재
			- 운영체제 서비스가 실행될 때는 관리자 모드
			- 사용자 프로그램이 실행될 때는 사용자 모드
			- 하드웨어/소프트웨어 인터럽트가 발생하면 관리자 모드(일반 프로그램이 직접 하드디스크에 접근하는 것은 보안적으로 위험)
			- 운영체제 서비스가 끝나면 다시 사용자 모드
		5) 일반적 프로그램의 실행
			- 프로그램 적재 (on memory)
			- User mode > (키보드, 마우스) > system mode (ISR) > usermode > (모니터, 디스크, 프린터) > system mode(ISR) > user mode

	* 하드웨어 보호
		1) 입출력장치 보호
			- 다른 사용자의 입출력, 정보 등에 방해(예: 프린터 혼선, 리셋, 다른 사람의 파일 읽고 쓰기 등)
			- 해결법
				1) 입출력 명령을 특권명령으로 : IN, OUT
				2) 입출력을 하려면 운영체제에게 요청하고(system mode로 전환)
				3) 운영체제가 입출력 대행, 마친 후 다시 user mode 복귀
				4) 올바른 요청이 아니면 운영체제가 거부
			- 일반 어플리케이션은 직접 하드웨어에 접근 불가능 중간의 OS에서 처리
		2) 메모리 보호
		3) CPU 보호


---


### 4.
