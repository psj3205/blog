---
layout: post
title:  "운영체제 정리"
date:   2018-10-12 19:51:02 +0900
---

### 1. 운영체제 서론
* PC 안에는 운영체제가 설치되어 있음
* 운영체제가 설치되어 있지 않는 PC는 야생마
* 사용자가 원하는데로 제어가 불가능
* 운영체제가 없으면 원하는 프로그램을 메모리에 올려서 실행하는것이 불가능

* 운영체제란?
	1) 컴퓨터 하드웨어를 잘 관리하여
	2) 성능을 높이고
	3) 사용자에게 편의성 제공
	4) 컴퓨터 하드웨어를 관리하는 프로그램

* 부팅이란?
	1) 전원을 껐다 키면 RAM의 내용은 모두 사라진다
	2) ROM은 전원을 꺼도 유지된다
	3) 컴퓨터가 전원을 키면 프로세스는 먼저 ROM의 코드를 읽어서 실행
	4) ROM안의 POST(Power On Self Test)가 실행 : 컴퓨터의 상태를 체크하는 코드(ROM은 부팅시에만 역할을 한다)
	5) Boot Loader(ROM에 위치) : 하드디스크 안에 저장된 운영체제를 찾아 메인 메모리의 RAM에 올린다
	6) 운영체제가 RAM에 올라온 상태가 되면 사용자가 원하는 상태로 제어할 수 있는 준비가 된다(OS는 전원을 끄기 전까지는 RAM에 상주한다)

* OS를 다른 방식으로 본다면?
	1) 커널 vs 쉘  		
	  +---------------------+    
    |     Application     |    
    |  +--------------+   |    
	  |  |       OS     |   |  
	  |  | +---------+  |   |  
	  |  | |  H/W    |  |   |  
	  |  | +---------+  |   |  
    |  +--------------+   |  
	  +---------------------+  


	 2) OS = 커널 + 쉘  
		- 커널 : 실제로 컴퓨터를 관리하는 코어 프로그램
		- 쉘(명령 해석기) : 오에스의 바깥부분에 위치, 사용자로부터 명령을 받고 해석하고 명령을 실행
		- 운영체제 과목에서는 커널을 공부

* OS의 관리 부분
	1) 프로세스 관리(중요)
	2) 메모리 관리(중요)
	3) 파일 관리
	4) 입출력 관리
	5) 네트워크 관리
	6) 보안 관리


---


### 2. 운영체제 역사
* Batch processing system(일괄처리)
	1) 최초의 운영체제
	2) 컴파일, 링크, 로딩 등과 같은 과정을 프로그래밍 하여 한번에 처리하는 시스템

* Multiprogramming system(다중프로그래밍)
	1) Batch processing system는 한번에 하나의 프로그램만 실행가능
	2) CPU가 계산을 하고 입출력 장치에서 처리하는 동안 CPU는 아무일을 하지 않는다
	3) 느린 입출력장치의 속도를 기다리는 것은 비싼 CPU를 낭비
	4) 메모리에 여러개의 프로그램을 올리는 방식을 고안
	5) 첫 프로그램에서 계산을 하고 입출력 장치를 처리하는 동안 CPU는 가만히 있지 않고 다음 프로그램의 계산을 실행
	6) CPU를 낭비하지 않는다

* Time-sharing system(시공유 시스템)
	1) interactive system(대화형) : 키보드, 모니터와 같은 입출력 장치의 발명으로 컴퓨터와 즉각적으로 상호작용 가능
	2) 메인 프레임 컴퓨터를 한번에 여러 사람이 단말기를 통해 동시에 사용하기 위해 아주 작은 시간동안 메인 프레임의 CPU가 여러 프로그램을 나누어서 번갈아가며 실행
	3) CPU의 속도가 아주 빠르기 때문에 단말기를 사용하는 사람은 컴퓨터를 단독으로 사용하는 것처럼 불편없이 원하는 작업을 할 수 있다
	3) 가상메모리 : 하드디스크의 일부를 메인메모리처럼 사용하는 기술
	4) Unix, Linux, Windows, Mac OS 등 현대의 대부분의 OS는 Time sharing system이다

* OS 기술 천이
	1) Supercomputer > Server > Workstation > PC > Handheld > Embedded
	2) OS 기술이 Handheld/Embedded까지 적용

* 고등운영체제
	1) 다중 프로세서 시스템(Multiprocessor system)
		성능향상 : 프로세서 여러개를 사용하므로
		비용절감 : 고성능 1개의 CPU를 사용하는 것보다 중사양의 CPU를 여러개 사용하는 것이 비용면에서 유리
		신뢰성 : 1개의 CPU가 고장나더라도 다른 CPU로 작업 가능
	2) 분산 시스템(Distributed system)
	3) 실시간 시스템(Real time system)
		어떤 계산이 특정한 시간내에 반드시 완료되어야 하는 시스템에 사용
		공장 자동화, 군사, 항공, 우주


---


### 3. 인터럽트 기반 시스템
* 인터럽트
	1) **현대 운영체제는 인터럽트 기반 시스템!**
	2) 부팅이 끝나면 운영체제는 메모리에 상주
	- 하드웨어 인터럽트
		3) 키보드, 마우스 등의 입력이 발생하면 입력에 대한 전기신호를 하드웨어 인터럽트에서 받아서
		4) CPU는 현재 수행하던 작업을 멈추고 운영체제 내의 특정 코드 실행(ISR)
		5) Interrupt Service Routine 종료 후 다시 대기
	- 소프트웨어 인터럽트
		3) 사용자 프로그램이 실행되면서 소프트웨어 인터럽트도 있음
		4) 예를들어 워드프로그램에서 하드에 있는 문서를 읽고 싶다면
		5) 워드프로그램이 인터럽트를 실행되면 현재 수행하던 작업을 멈추고
		6) OS내의 하드디스크를 읽어오는 특정코드가 실행(ISR)
		7) ISR가 실행되어 메모리에 문서를 올리면 종료 후 다시 사용자 프로그램으로 복귀

* 인터럽트 기반 운영체제
	1) 운영체제는 평소에는 대기 상태
		- 하드웨어 인터럽트, 소프트웨어 인터럽트, 내부 인터럽트에 의해 동작 수행
	2) ISR이 종료되면 원래의 대기상태 또는 사용자 프로그램으로 복귀
	3) 현재 운영체제는 인터럽트기반의 운영체제, 운영체제는 여러 코드들의 모음, 평소에는 작동하지 않고 인터럽트가 걸릴 때 작동
	4) 하나의 프로그램이 실행되는 경우 동작을 보면 인터럽트가 걸리면서 OS로 갔다가 다시 프로그램으로 갔다가를 반복하면 원하는 기능을 수행한다

* 이중모드
	1) 한 컴퓨터를 여러 사람이 동시에 사용하는 환경은 한 사람의 고의/실수가 프로그램 전체에 영향
	2) 사용자 프로그램은 STOP 등 치명적 명령 사용을 불가하게 함
		- **사용자(user)모드 vs 관리자(supervisor)모드**
		- 이중모드
		- 관리자 모드 = 시스템 모드 = 모니터 모드 = 특권 모드
	3) 특권 명령(privileged instructions)
		- STOP, HALT, RESET, SET_TIMER, SET_HW, .....
		- 일반 유저가 특권 명령을 실행한다면 CPU는 소프트웨어 인터럽트를 실행하여 특권 명령을 실행한 일반 프로그램을 종료시킨다
	4) **이중 모드**
		- 레지스터에 모드를 나타내는 플래그(flag)가 존재
		- 운영체제 서비스가 실행될 때는 관리자 모드
		- 사용자 프로그램이 실행될 때는 사용자 모드
		- 하드웨어/소프트웨어 인터럽트가 발생하면 관리자 모드(일반 프로그램이 직접 하드디스크에 접근하는 것은 보안적으로 위험)
		- 운영체제 서비스가 끝나면 다시 사용자 모드
	5) 일반적 프로그램의 실행
		- 프로그램 적재 (on memory)
		- User mode > (키보드, 마우스) > system mode (ISR) > usermode > (모니터, 디스크, 프린터) > system mode(ISR) > user mode

* 하드웨어 보호
	1. 입출력장치 보호
		- 과거에는 한 컴퓨터에 여러명이 붙어서 사용
		- 한사람이 잘못된 시도를 하면 여러사람에게 피해
		- 다른 사용자의 입출력, 정보 등에 방해(예: 프린터 혼선, 리셋, 다른 사람의 파일 읽고 쓰기 등)
		- 해결법
			1. **입출력 명령을 특권명령으로 : IN, OUT**
			2. 입출력을 하려면 운영체제에게 요청하고(system mode로 전환)
			3. 운영체제가 입출력 대행, 마친 후 다시 user mode 복귀
			4. 올바른 요청이 아니면 운영체제가 거부
		- 일반 어플리케이션은 직접 하드웨어에 접근 불가능 중간의 OS에서 처리

	2. 메모리 보호
		- 다른 사용자 프로그램 또는 운영체제 영역 메모리를 접근하는 것을 **Segment Violation** 이라고 한다
		- 사용자 프로그램이 또다른 사용자 프로그램 또는 운영체제가 위치한 메모리에 접근하는 것을 차단
		- 해결법
			1. **MMU(Memory Management Unit)** 를 두어서 다른 메모리 영역에 침범하는 것을 감시
			2. MMU 설정은 **특권명령**: 운영체체만 바꿀 수 있다

	3. CPU 보호
		- 한 사용자가 실수 또는 고의로 CPU 시간 독점
			1. 예 : 무한루프(다른 사용자의 프로그램 실행 불가)
		- 해결법
			1. **Timer를 두어 일정 시간 경과 시 타이머 인터럽트**
			2. 인터럽트 서비스 루틴에서 어떤 프로그램에 CPU가 독점되어 있는지 확인
			3. 독점되어 있는 프로그램이 발견된다면 중지하고 다른 프로그램으로 강제 전환


---


### 4. 운영체제 서비스
* 운영체제의 역할
	- 프로세스 관리
	- 메인메모리(RAM) 관리
	- 파일 관리
	- 보조기억장치 관리
	- 입출력 장치 관리
	- 네트워킹
	- 보호
	- 기타

* 프로세스 관리
	- **프로세스** : 메모리에서 실행 중인 프로그램(Program in execution)
		1. 메모리에 올라와서 **CPU에 의해 실행** 되는 프로그램
		2. 하드디스크에 있는 프로그램과 구분

	- 주요기능
		1. 프로세스의 생성, 소멸
		2. 프로세스 활동 일시중지, 활동 재개
		3. 프로세스 간 통신(interprocess communication :IPC)
		4. 프로세스 간 동기화
		5. 교착상태 처리(deadlock handling)

* 주기억장치 관리(Main memory management)
	- 주요기능
		1. 프로세스에게 메모리 공간 할당
		2. 메모리의 어느 부분이 어느 프로세스에게 할당되었는가 추적, 감시
		3. 프로세스 종료시 메모리 회수
		4. 메모리의 효과적 사용
		5. 가상 메모리: 물리적 실제 메모리보다 큰 용량 갖도록

* 파일 관리
	- Track/Sector로 구성된 디스크를 파일이라는 논리적 관점으로 보이게 한다

	- 주요기능
		1. 파일의 생성과 삭제 (file creation & deletion)
		2. 디렉토리(directory)의 생성과 삭제 (또는 폴더 folder)
		3. 기본동작지원: open, close, read, write, create, delete
		4. Track/sector – file 간의 매핑(mapping)
		5. 백업(backup)

* 보조기억장치 관리
	- 하드 디스크, 플래시 메모리 등
	- 주요기능
		1. 빈공간 관리
		2. 저장공간 할당
		3. 디스크 스케줄링

* 입출력 장치 관리
	- I/O device Management
	- 주요기능
		1. 장치 드라이버
		2. 입출력 장치의 성능향상 : buffering, caching, spooling

* 시스템 콜
	- 운영체제 서비스를 받기 위한 호출
	- 메모리에 올라온 유저 프로그램(프로세스)가 실행 중 운영체제의 역할이 필요할 경우 요청하는 것이 **시스템콜**
	- 주요 시스템 콜
		1. Process: end, abort, load, execute, create, terminate, get/set attributes, wait event, signal event
		2. Memory: allocate, free
		3. File: create, delete, open, close, read, write, get/set attributes
		4. Device: request, release, read, write, get/set attributes, attach/detache devices
		5. Information: get/set time, get/set system data
		6. Communication: socket, send, receive


---


### 5. 프로세스 관리
* 프로세스
	- 프로그램 VS 프로세스
		1. **process, task, job** 모두 같은 의미
		2. 하드디스크 안에 있으면 **프로그램** , 프로그램이 메인 메모리에 올라가면 **프로세스**
	- 프로세스 상태
		1. new : 하드디스크의 프로그램이 메인 메모리에 올라온 상태
		2. ready : 메인 메모리에 올라온 후 초기화를 완료한 상태
		3. running : CPU에 의해 실행 중인 상태
		4. waiting : **입출력 장치에서 처리해야 할 일이 생기면** CPU는 다음 프로세스로 넘어간다. 이 때 다시 CPU 서비스를 받기 위해 대기하는 상태
		5. terminated : 프로세스가 종료된 상태

* **PCB(Process Control Block)**
	- Task Control Block이라고도 함
	- 프로세스에 대한 모든 정보
	- process state (running, ready, waiting, …), PC(Program Counter), registers, MMU info (base, limit), CPU time, process id, list of open files, …
	- 인간으로 비유하면 주민등록정보와 같다

* Queues
	- Job Queue
			1. 하드디스크에서 메인 메모리로 올라갈 때 있는 큐
			2. **Job scheduler(Long-term scheduler)** : Job Queue의 프로그램 중 어떤 프로그램을 메인 메모리를 올릴지 관리하는 프로그램
	- Ready Queue
			1. CPU 서비스를 받기 위해 대기하는 상태의 큐
			2. **CPU scheduler(short-term scheduler)** : Ready Queue에 있는 프로세스 중 어떤 것에 CPU 서비스를 제공할지 관리하는 프로그램
	- Device Queue
			1. 장치를 사용하기 위해 대기하는 상태의 큐
			2. **Device scheduler** : Device Queue에 있는 프로세스 중 어떤 것에 Device 서비스를 제공할지 관리하는 프로그램

* Multiprogramming
	- Degree of Multiprogramming : 메인 메모리에 프로세스가 몇개가 올라 가는가의 정도
	- I/O bound process(문서편집 프로그램) vs CPU bound process(일기 예보)
	- Job scheduler에서 I/O bound process와 CPU bound process의 분배를 적절히 하여 메인 메모리에 올린다
	- **Swapping(Medium-term scheduler)**
		1. Swap out : 메인 메모리에 있는 프로세스가 일정시간 작업을 하지 않으면 메인메모리에서 빠져서 하드디스크의 일정 공간(Backing Store)에 저장
		2. Swap in : 그 프로세스가 다시 작업을 시작하면 하드디스크에서 메인메모리로 올린다
	- Context switching(문맥 전환)
		1. scheduler
		2. Dispatcher
		3. Context switching overhead


---


### 6. CPU 스케줄링
* CPU Scheduling
	- 선점(Preemptive) VS 비선점(Non-preemtive)
		1. 선점 : 현재 CPU 서비스가 되고 있는 프로세스가 있음에도 불구하고 새로운 프로세스를 허용하는 스케줄링
		2. 비선점 : 현재 CPU 서비스가 되고 있는 프로세스가 종료되어야 새로운 프로세스를 허용하는 스케줄링
	- 스케줄링 척도(Scheduling criteria)
		1. CPU 이용률
		2. 처리율
		3. 반환시간 : 전체 작업이 끝날 때까지 걸리는 시간
		4. 대기시간 : Ready Queue에서 CPU 서비스를 받기 위해 대기하는 시간
		5. 응답시간 : 처음 응답이 나오는데 걸리는 시간

* CPU Scheduling Algorithms
	- First-Come, First-Served(FCFS)
	- Shortest-Job-First(SJF)
	-	Priority
	-	Round-Robin (RR)
	-	Multilevel Queue
	-	Multilevel Feedback Queue

* First-Come, First-Served(FCFS)
	- Simple & Fair
	- Nonpreemptive Scheduling
	- 예제 : 평균 대기시간을 구하라
		- P1 대기시간 = 0, P2 대기시간 = 24, P3 대기시간 = 27(P1,P2,P3 순으로)
		- 평균대기시간 = (0+24+27)/3 = **17 msec**
		- P3 대기시간 = 0, P2 대기시간 = 3, P3 대기시간 = 6(P3,P2,P1 순으로)
		- 평균대기시간 = (0+3+6)/3 = **3 msec**
		- **짧게 끝나는 프로세스를 먼저하는 것이 유리**
	- process		Burst time(msec)
			P1					24
			P2					3
			p3					3
	- Convoy Effect(호위효과)
		1. 처리시간이 긴 프로세스 뒤에 다른 프로세스들이 뒤에서 대기하는 모습이 왕을 호위하는 모습과 비슷하다고 하여 붙여진 이름

* Shortest-Job-First 1(SJF)
	- 예제 : 평균 대기시간을 구하라
		- (3+16+9+0)/4 = **7 msec**(SJF방식으로)
		- (0+6+14+21)/4 = **10.25 msec**(FCFS방식으로 P1,P2,P3,P4순으로)
	- process		Burst time(msec)
			P1					6
			P2					8
			p3					7
			p4					3
	- 대기시간을 줄이는데 최적화 되어있는 알고리즘(이상적으로)
	- 하지만 비현실적임

* Shortest-Job-First 2(SJF)
	- 예제 : 평균 대기시간을 구하라
	- Nonpreemptive scheduling SJF방식으로
		- 평균대기시간 = (0+7+15+9)/4 = 7.75 msec
	- Preemptive scheduling SJF방식으로(Shortest Remaining Time First라고도 명명 : 최소잔여시간우선)
		- 평균대기시간 = (9+0+15+2)/4 = 6.5 msec
	- process		Arrival Time		Burst time(msec)
			P1						0							8
			P2						1							4
			p3						2							9
			p4						3							5

* Priority Scheduling
	- 우선순위가 높은 프로세스먼저
	- 예제 : 평균 대기시간을 구하라
		- 평균 대기시간 = (6+0+16+18+1)/5 = 8.2 msec
	- process		 Burst Time		 Priority
			P1						10						3
			P2						1							1
			p3						2							4
			p4						1							5
			p5						5							2

	- Priority 설정기준
		1. 내부요소 : 타임 리미트, 메모리 차지
		2. 외부요소 : 비용을 지불한 순위, 정치적 요소

	- Preemptive, Nonpreemptive 모두 가능

	- 문제점
		1. Indefinite blocking : starvation(기아)
			- 우선순위가 낮은 프로세스는 높은 우선순위가 끝날때까지 대기를 하여도 높은 우선순위 프로세스가 새로운 들어와서 아무리 기다려도 실행이 되지 않는 현상
		2. 해결법 : aging(대기를 오래하면 우선순위를 높여준다)

* Rouond-Robin
	- Time-sharing system(시분할/시공유 시스템)
	- Time quantum 시간양자 = time slice(10~100 msec)
	- Preemptive scheduling
	- 예제
		- time quantum = 4 msec
		- 평균 대시시간 = (6+4+7)/3 =5.66 msec
	- process		Burst time(msec)
				P1					24
				P2					3
				p3					3

	- 타임 퀀텀 사이즈에 따라 퍼포먼스가 달라진다
		1. 타임 퀀텀을 무한대로 => FCFS와 같다
		2. 타임 퀀텀을 영으로 => 프로세스들이 동시에 실행되는 것처럼 보임

	- 예제 : **평균 반환시간** 을 구하라(프로세스가 실행이 끝날때까지의 시간)
		- 평균 반환시간 = 11.0 msec(time quantum = 1), 12.25 msec(time quantum=5)
		- process		Burst time(msec)
				P1					6
				P2					3
				p3					1
				p4					7

* Multilevel Queue Scheduling
	- Process groups
		1. System processes
		2. Interactive processes
		3. Interative editing processes
		4. Batch processes
		5. Student processes

	- 다양한 성격의 프로세스들을 한 큐에 두는 것이 적절하지 않다고 생각한 방법

	- Single ready Queue -> Serveral Separate Queues
		1. 각각의 Queue에 절대적 우선순위 존재
		2. 또는 CPU time을 각 Queue에 차등배분
		3. 각 Queue는 독립된 scheduling 정책

* Multilevel Feedback Queue Scheduling
	- 복수 개의 Queue
	- 다른 Queue로의 점진적 이동
		1. 모든 프로세스는 하나의 입구로 진입
		2. 너무 많은 CPU time 사용 시 다른 Queue로 이동
		3. 기아 상태 우려시 우선순위 높은 Queue로 이동


---


### 7. 프로세스 생성과 종료
* Process Creation
	- **프로세스는 프로세스에 의해 만들어진다!**
		1. 부모 프로세스
		2. 자식 프로세스
		3. 프로세스 트리

	- Process Identifier(PID)
		1. 일반적으로 정수로 붙힌다
		2. 프로세스를 구분하는 고유한 번호

	- 프로세스 생성 시스템콜
		1. fork() : 부모 프로세스 복사
		2. exec() : 실행파일을 메모리로 가져오기

	- 프로세스 종료 시스템콜
		1. exit() : 해당 프로세스가 가졌던 모든 자원을 OS에게 반환


---


### 8. 쓰레드(Thread)
* Thread?
	- 쓰레드 : 프로그램 내부의 흐름, 맥

	- 다중 쓰레드(Multithreads)
		1. 한 프로그램에 2개 이상의 맥
		2. 맥이 빠른 시간 간격으로 스위칭 된다=>여러 맥이 동시에 실행되는 것처럼 보인다
		3. 실제로는 한 순간에는 한 프로세스만 실행된다

	- 예 : Web browser
		1. 화면 출력하는 스레드 + 데이터 읽어오는 쓰레드

	- 예 : Word processor
		1. 화면 출력하는 쓰레드 + 키보드 입력 받는 쓰레드 + 철자/문법 오류 확인 쓰레드

	- 예 : 음악, 동영상 플레이어, Eclipse IDE

* Thread vs process
	- **한 프로세스에는 기본 1개의 쓰레드**
	- 한 프로세스에 여러 개의 쓰레드도 가능
	- 쓰레드 구조
		1. 프로세스의 메모리 공간 공유
		2. 프로세스의 자원 공유
		3. 비공유 : 개별적인 PC(프로그램 카운터), SP(스텍 포인터), registers, stack
	- 프로세스의 스위칭 vs 쓰레드의 스위칭
		1. 과거에는 프로세스 단위로 스위칭이 작동했지만 현대에는 쓰레드 단위로 스위칭이 동작한다

* 프로세스 동기화
	- Process Synchronization
		1. 공유하는 데이터를 동시에 접근하면 데이터의 불일치가 일어날 수 있다
		2. 프로세스들 간의 순차적인 접근을 하여서 데이터의 일관성이 유지되도록 하는 것이 프로세스 동기화

	- processes
		1. 독립적 프로세스 vs 협동적 프로세스

	- 예제 : 은행계좌문제
		1. 부모님은 은행계좌에 입금, 자녀는 출금
		2. 입금과 출금은 독립적으로 일어난다

	- 입출금 동작에 시간 지연 추가
		1. 잘못된 결과값
		2. 이유 : 공통변수(예제에서는 잔액)에 대한 동시 업데이트
		3. 해결 : 한번에 한 쓰레드만 업데이트하도록 -> 임계구역 문제

* 임계구역 문제
	- The Critical-Section Problem(임계구역 문제)
	- Critical Section
		1. 여러개의 쓰레드로 구성된 시스템에서 발생
		2. 각각의 쓰레드가 공통변수를 바꾸는 일을 하는 경우에 쓰레드는 임계구역이라는 코드 영역을 가지고 있음(예제에서 잔액을 업데이트 하는 구간)
	- 해결책
		1. 상호배타 : 오직 한 쓰레드만 진입(잔액을 업데이트하는 코드는 동시에 실행 불가)
		2. 진행 : 진입 결정은 유한 시간 내
		3. 유한대기 : 어느 쓰레드라도 유한 시간 내(유한시간 내에 임계구역이 실행되어야 한다)

* 프로세스/쓰레드 동기화 목적
	- 임계구역 문제 해결(틀린 답이 나오지 않도록)
	- 프로세스 실행 순서 제어(원하는대로)

* 동기화 도구
	- Synchronization Tools
		1. Semaphores
		2. Monitors
		3. Misc

	- Semaphores(세마포)
		1. 동기화 문제 해결을 위한 소프트웨어 도구
		2. 구조 : 정수형 변수 + 두 개의 동작(P, V)

* 세마포
	- 동작
		1. P:Proberen(test)->acquire()
		2. V:Verhogen(increment)->release()
	- 구조(Java)
		class Semaphore{
			int value;	// number of permits
			Semaphore(int value){
					.....
			}
			void acquire(){
					value--;
					if(value < 0){
						add this process/thread to list;
						block;
					}
			}
			void release(){
					value++;
					if(value <= 0){
						remove a process P from list;
						wakeup P;
					}
			}
		}

* 세마포
	- 일반적 사용(1): 상호 배타(한번에 하나만)
		- sem.value = 1;(number of permits: 1쓰레드만 세마포에 입장 가능하게 설정)
		- sem.acquire();
			Critical-Section()
			sem.release();
			1. Critical-Section() 전,후에 acquire()와 release()함수를 호출하여 동기화가 되게 한다
			2. 부모가 잔액에 입금을 하는 코드에 진입하기 전에 acquire()가 먼저 실행된다
			3. acquire()에서 value가 1감소 되고 Critical Section에서 잔고에 돈을 넣는다
			4. 이 때 만약 스위칭 되어 자녀 쓰레드가 돈을 찾으려고 한다고 가정해본다
			5. 자녀 쓰레드에서도 Critical Section에 진입하기 전에 acquire()가 실행된다
			6. 하지만 value가 이미 0이였으므로 1 감소되면 value는 -1 이된다
			7. 조건문이 만족하여 세마포어 리스트에 들어가고 블록된다
			8. 다시 스위칭되어 부모 쓰레드에서 입금이 완료되고 release() 함수가 실행된다
			9. value가 1 증가하면 value는 0이되고 조건문을 만족하여 세마포어 리스트에 있던 자녀 쓰레드를 다시 레디 큐로 보낸다
			10. 자녀 쓰레드는 돈을 인출하는 코드를 실행한다

	- 일반적 사용(2): Ordering
		- sem.value = 0;
			+------------------------------+
			|       P1			|			P2			 |
			+------------------------------+
			|								|sam.acquire() |
			+------------------------------+
			|				S1			|				S2     |
			+------------------------------+
			| sam.release() |    					 |
			+------------------------------+

		- 실행 순서를 설정할 수 있다
			1. 항상 입금먼저
			2. 항상 출금먼저
			3. 입출금 교대


---


### 9. 전통적 동기화 예제
* 전통적 동기화 예제
	- Producer and Consumer Problem
		1. 생산자-소비자 문제
		2. 유한버퍼 문제(Bounded Buffer Problem)

	- Renders-Writers Problem
		1. 공유 데이터베이스 접근

	- Dining Philosopher Problem
		1. 식사하는 철학자 문제

* Producer-Consumer Problem
	- 생산자-소비자 문제
		1. **생산자가 데이터를 생산하면 소비자는 그것을 소비**
		2. 예: 컴파일러->에셈블러, 파일 서버->클라이언트, 웹서버->웹클라이언트

	- Bounded buffer
		1. 생산된 데이터는 버퍼에 일단 저장(생산속도와 소비속도 차이 등)
		2. 현실 시스템에서 버퍼 크기는 유한
		3. **생산자는 버퍼가 가득 차면 더 넣을 수 없다**
		4. **소비자는 버퍼가 비면 뺄 수 없다**

	- 소스
		class Buffer {
			int[] buf;
			int size;
			int count;
			int in;
			int out;
			Buffer(int size) {
				buf = new int[size];
				this.size = size;
				count = in = out = 0;
			}
			void insert(int item) {
				// check if buf is full
				while (count == size)
				;
				// buf is not full
				buf[in] = item;
				in = (in+1)%size;
				count++;
			}
			int remove() {
				// check if buf is empty
				while (count == 0)
				;
				// buf is not empty
				int item = buf[out];
				out = (out+1)%size;
				count--;
				return item;
			}
		}

	- 잘못된 결과
		1. 최종적으로 버퍼 내에는 0 개가 있어야 한다
		2. 실행 불가, 또는
		3. count != 0(생산된 항목 숫자 != 소비된 항목 숫자)

	- 이유
		1. 공통변수 count, buf[]에 대한 동시 업데이트
		2. **공통변수 업데이트 구간(=임계구역)에 대한 동시 진입**

	- 해결법
		1. **임계구역에 대한 동시 접근 방지(상호배타)**
		2. 세마포를 사용한 상호배타

	- 위의 세마포를 사용하면 문제는 해결하지만 아직 해결하지 못한 부분이 있음
		1. Busy-wait : 무한루프를 돌면서 대기한다
			- 생산자 : 버퍼가 가득 차면 기다려야 = 빈(empty) 공간이 있어야
			- 소비자 : 버퍼가 비민 기다려야 = 찬(full) 공간이 있어야
		2. 세마포를 사용한 busy-wait 회피(새로운 세마포 2개추가)
			- 생산자 : empty 세마포 (number of permit = BUF_SIZE)
			- 소비자 : full 세마포 (number of permit = 0)

			[생산자]										[소비자]
			empty.acquire();					full.acquire();
			PRODUCE;									CONSUME;
			full.release();						empty.release();

* Readers-Writers Problem
	- 공통 데이터베이스
		1. Readers : read data, never modify it
		2. Writers : read data and modify it
	- 상호배타 : 한번에 한개의 프로세스만 접근하는 것은 비효율적
	- 리더는 동시에 접근해도 된다(데이터를 수정하지 않으므로)
	- 리더가 접근하는 중에는 라이터는 접근 불가능

* Dining Philosopher Program
	- 식사하는 철학자 문제
		1. 5명의 철학자, 5개의 젓가락, 생각->식사->생각->식사 ...
		2. 식사하려면 2개의 젓가락 필요
	- 프로그래밍
		1. 젓가락 : 세마포(# of permit = 1)
		2. 젓가락 세마포에 일련번호 : 0~4
		3. 왼쪽 젓가락 -> 오른쪽 젓가락(왼쪽 젓가락 들고 그다음 오른쪽 젓가락 순으로)

	- 잘못된 결과 : starvation
		1. 모든 철학자가 식사를 하지 못해 굶어 죽는 현상
		2. 동시에 배가 고파서 왼쪽 젓가락을 동시에 드는 경우
	- 이유 = 교착상태(deadlock)


---


### 10. 교착상태
* deadlock
	- 프로세스는 실행을 위해 여러 자원을 필요로 한다
		1. CPU, 메모리, 파일, 프린터,....
		2. 어떤 자원은 갖고 있으나 다른 자원은 갖지 못할 때 대기해야
		3. **다른 프로세스 역시 다른 자원을 가지려고 대기할 때 교착상태 가능성**

	- 교착상태 **필요조건**(아래 조건을 만족하면 교착상태가 발생할 수도 있다. 발생하지 않을 수도 있다)
		1. 상호배타
		2. 보유 및 대기
		3. 비선점(No Preemption)
		4. 환형대기

* 자원(Resources)
	- 동일자원
		1. 동일 형식(type) 자원이 여러개 있을 수 있다
		2. 예 : 동일 CPU 2개, 동일 프린터 3개 등
	- 자원의 사용
		1. 요청 -> 사용 -> 반납
	- **자원 할당도**
		1. 어떤 자원이 어떤 프로세스에게 할당되었는가?
		2. 어떤 프로세스가 어떤 자원을 할당 받으려고 기다리고 있는가?
		3. 자원 : 사각형, 프로세스 : 원, 할당 : 화살표

	- 교착상태 필요조건
		1. 자원 할당도 상에 화살표가 한방향으로 도는 원이 만들어져야 한다(환형대기)
		2. 충분조건은 아님

	- 예제 : 식사하는 철학자 문제
		1. 원이 만들어지지 않게 하려면? 원을 만들지 않게 한다

* 교착상태 처리
	- 교착상태 방지
	- 교착상태 회피
	- 교착상태 검출 및 복구
	- 교착상태 무시

* 교착상태 방지
	- 교착상태 4가지 필요조건 중 한 가지 이상 불만족시킨다
		1. 상호배타
			- 자원을 공유 가능하게하는 것은 원천적으로 불가능(적절한 방법이 아님)
			- 예 : 젓가락을 공유하는 것은 불가능, 프린터를 공유하는 것은 불가능
		2. 보유 및 대기(추천 방법)
			- 자원을 가지고 있으면서 다른 자원을 기다리지 않게 한다
			- 예: 자원이 없는 상태에서 모든 자원 대기, 일부 자원만 가용하면 보유 자원을 모두 놓아주기
			- 단점 : 자원 활용률 저하, 기아
		3. 비선점
			- 자원을 선점 가능하게하는 것도 원천적으로 불가능(예 : 프린터)
		4. 환형대기(추천 방법)
			- 예 : 자원에 번호 부어하여 번호 오름차순으로 자원 요청(원을 만들어지지 않게 한다)
			- 단점 : 자원 활용률 저하

	* 교착상태 회피
		- 교착상태 = 자원 요청에 대한 잘못된 승인
		- 예제
			1. 3개의 process가 12개의 magnetic tape를 활용
				- Current needs는 1회에 필요한 자원, Max need는 연산을 끝내기 위해 총 필요한 자원
			2. 안전한 할당
			process						Max needs					Current needs
				P0								10										5
				P1								4											2
				P2								9											2
			3. 불안전한 할당
			process						Max needs					Current needs
				P0								10										5
				P1								4											2
				P2								9										**3**		
		- 운영체제는 자원을 할당할 때 불안전 할당 되지 않도록
				1. 불안전 할당 -> 교착상태

* 교착상태 검출 및 복구
	- 교착상태가 일어나는 것을 허용
	- 주기적 검사
	- 교착상태 발생 시 복구
	- 검출
		1. 검사에 따른 추가 부담: 계산, 메모리
	- 복구
		1. 프로세스 일부 강제 종료
		2. 자원 선점하여 일부 프로세스에게 할당

* 교착상태 무시
	- 교착상태는 실제로 잘 일어나지 않는다!
		1. 4가지 필요조건 모두 만족해도 잘 일어나지 않는다
		2. 교착상태 발생 시 재시동


---


# 11. 모니터
* 모니터
	- 모니터
		1. 세마포 이후 **프로세스 동기화 도구**
		2. 세마포 보다 **고수준** 개념

	- 구조
		1. **공유자원+공유자원 접근함수**
		2. **2개의 queues : 배타동기 + 조건동기**
		3. 공유자원 접근함수에는 최대 1개의 쓰레드만 진입
		4. 진입 쓰레드가 조건동기로 블록되면 새 쓰레드 진입가능
		5. 새 쓰레드는 조건동기로 블록된 쓰레드를 깨울수 있다
		6. 깨워진 쓰레드는 현재 쓰레드가 나가면 재진입할 수 있다

* 자바 모니터
	- 자바의 모든 객체는 모니터가 될 수 있다
		1. 배타동기: Synchronized 키워드 사용하여 지정
		2. 조건동기: wait(), notify(), notifyAll() 메소드 사용


---


# 12. 주기억장치 관리
* 메모리 역사
	- Core Memory
	- 진공관 메모리
	- 트랜지스터 메모리
	- 집적회로 메모리:SRAM, DRAM

* 언제나 부족한 메모리
	- 프로그램 변천
		1. 기계어/어셈블리어 작성
		2. C언어 작성
		3. 자바, 객체지향형 언어 작성
		4. 숫자 처리->문자 처리-> 멀티미디어 처리-> Big Data

	- 메모리 용량 증가 vs 프로그램 크기 증가
		1. 언제나 부족한 메모리

	- 어떻게 메모리를 효과적으로 사용할 수 있을까?
		1. 메모리 낭비 없애기
		2. 가상 메모리(virtual memory)

* 프로그램을 메모리에 올리기
	- 메모리 구조
		1. 주소(Address)+데이터(Data)
	- 프로그램 개발
		1. 원천파일(Source file): 고수준언어 또는 어셈블리언어
		2. 목적파일(Object file): 컴파일 또는 어셈블 결과
		3. 실행파일(Executable file): 링크 결과
	- 컴파일러, 어셈블러, 링터, 로더
		1. Compiler, assenbler, linker, Loader
	- 프로그램 실행: code + data + stack
	- 실행파일을 메모리에 올리기(OS의 역할)
		1. 메모리 몇 번지에?
		2. 다중 프로그래밍 환경에서는?
	- MMU 사용
		1. 재배치 레지스터(Relocation register)
		2. 프로그램이 메모리에 올라갈 때 항상 같은 번지수에 들어간다고 보장할 수 없다
		3. CPU는 모든 프로그램이 0번지부터 실행된다고 인식한다
		4. 그래서 CPU가 가리키는 메모리의 주소 번지수를 MMU가 보정해준다
		5. 그 결과 메모리의 어떤 번지수에 프로그램이 올라가던지 CPU에서서는 항상 일정하게 가리킬 수 있게 만든다
	- 주소 구분
		1. 논리주소 vs 물리주소
		2. CPU가 가리치는 주소 : 논리주소
		3. 실제로 MMU를 통과한 후 메인메모리를 가리키는 주소 : 물리주소


---


### 13. 메모리 낭비 방지
* 동적 적재(Dynamic Loading)
	- 프로그램 실행에 반드시 필요한 루틴/데이터만 적재
		1. 모든 루틴이 다 사용되는 것이 아니다(예: 오류처리가 일어날 때 그 때 메모리에 올린다)
		2. 모든 데이터가 다 사용되는 것이 아니다(예: 배열)
		3. 자바: 모든 클래스가 다 사용되는 것은 아니다
		4. 실행 시 필요하면 그때 해당 부분을 메모리에 올린다
		- cf 정적 적재(Static loading)

* 동적 연결(Dynamic Linking)
	- 여러 프로그램에 공통 사용되는 라이브러리
		1. 공통 라이브러리 루틴를 메모리에 중복으로 올리는 것은 낭비
		2. 라이브러리 루틴 연결을 실행 시까지 미룬다(원래는 실행파일을 만들기 전에 링크가 수행된다)
		3. 오직 하나의 라이브러리 루틴만 메모리에 적재되고,
		4. 다른 애플리케이션 실행 시 이 루틴과 연결된다
		- 예 : 여러 애플리케이션에서 공통으로 쓰이는 라이브러리는 일단 1개만 올리고 필요시에 추가로 링크한다
	- 공유 라이브러리(shared library)-Linux
	- 동적 연결 라이브러리(Dynamic linking library)DLL-Windows

* Swapping
	- 메모리에 적재되어 있으나 현재 사용되지 않고 있는 프로세스 이미지
		1. 메모리 활용도를 높이기 위해 Backing store(hdd의 기존 프로그램이 저장되어 있는 장소가 아니라 별도의 장소)로 몰아내기
		2. swap-out vs swap-in
		3. Relocation register 사용으로 적재 위치는 무관
		4. 프로세스 크기가 크면 backing store 입출력에 따른 부담이 큼
		5. backing store는 대략 사용 컴퓨터의 ram 크기 만큼 지정


---


# 14. 연속 메모리 할당
* 연속 메모리 할당
	- 다중 프로그래밍 환경
		1. 부팅 직후 메모리 상태 : O/S + big single hole(메모리에 운영체제가 올라가고 나머지 메모리는 비어있다)
		+------+
		| O/S	 |
		+------+
		|      |
		|      |		
		|      |
		|      |
		|      |
		|      |
		+------+

		2. 프로세스 생성 & 종료 반복 -> 분산된 빈공간
		+------+
		| O/S	 |
		+------+
		|      |
		||||||||		
		|      |
		||||||||
		|      |
		||||||||		
		+------+		

	- **메모리 단편화(Memory fragmentation)**
		1. Hole들이 불연속하게 흩어져 있기 때문에 프로세스 적재 불가
		2. **외부 단편화 발생**
		3. 외부 단편화를 최소화 하려면?

	- 연속 메모리 할당 방식
		1. First-fit(최초 적합) : 가장 처음 만나는 메모리 공간에 적재
		2. Best-fit(최적 적합) : 가장 적절한 메모리공간에 적재
		2. Worst-fit(최악 적합) : 가장 부적절한 메모리공간에 적재

	- 예제
		1. Hole : 100/500/600/300/200KB
		2. 프로세스 : 212 417 112 426KB

	- 할당 방식 성능 비교 : 속도 및 메모리 이용률
		1. 속도 : first-fit
		2. 메모리 이용률 : first-fit, best-fit 2개 비슷

	- 외부 단편화로 인한 메모리 낭비 : 1/3 수준(사용불가)
		1. **Compaction** : 최적 알고리즘 없음, 고부담
		2. 다른 방법은?


---


# 15. 페이징(Paging)
* 페이징
	- **프로세스를 일정 크기(=페이지)로 잘라서 메모리에!**
		1. 프로세스는 페이지(page)의 집합
		2. 메모리는 프레임(frame)의 집합
		3. 페이지와 프레임의 크기는 같다

	- 페이지를 프레임에 할당
		1. MMU 내의 재배치 레지스터 값을 바꿈으로서(CPU를 속인다, 호출하는 주소값을 보정해준다)
		2. **CPU는 프로세스가 연속된 메모리 공간에 위치한다고 착각**
		3. MMU는 페이지 테이블이 된다
			- **페이징 목적의 MMU** 는 페이지 테이블이라고 부른다
			- 페이징 테이블의 재배치 레지스터는 여러개

* 주소 변환
	- 논리주소(Logical address)
		1. CPU가 내는 주소는 2진수로 표현(전체 m 비트)
		2. 하위 n 비트는 오프셋 또는 변위
		3. 상위 m-n 비트는 페이지 번호

	- 주소변환 : 논리주소->물리주소(Physical address)
		1. 페이지 번호(p)는 페이지 테이블 인덱스 값
		2. p에 해당되는 테이블 내용이 프레임 번호(f)

	- 예제
		1. Page Size = 4 bytes
		2. Page Table : 5 6 1 2
		3. 논리주소 13 번지는 물리주소 몇 번지?

	- 예제
		1. Page Size = 1KB
		2. Page Table = 1 2 5 4 8 3 0 6
		3. 논리 주소 3000번지는 물리주소 몇 번지?
		4. 물리 주소 0x1A53 번지는 논리주소 몇 번지?

* 내부단편화, 페이지 테이블
	- 내부 단편화
		1. 프로세스 크기가 페이지 크기의 배수가 아니라면,
		2. 마지막 페이지는 한 프레임을 다 채울 수 없다
		3. 남은 공간 = 메모리 낭비

* 보호와 공유
	- 보호(Protection) : 해킹 등 방지
		1. 모든 주소는 페이지 테이블을 지나가므로,
		2. 페이지 테이블 엔트리마다 r(읽기),w(쓰기),x(실행) 비트 두어
		3. 해당 페이지에 대한 접근 제어 가능

	- 공유(Sharing) : 메모리 낭비 방지
		1. 같은 프로그램을 쓰는 복수 개의 프로세스가 있다면(워드 프로세서 창 3개 띄운경우),
		2. Code+data+stack에서 code는 공유 가능(non-self-modifying code=reentrance code=pure code인 경우=실행 중에 변경되지 않는 코드)
		3. 프로세스의 페이지 테이블 code 영역이 같은 곳을 가리키게 한다


---


# 16. 세그멘테이션(Segmentation)
* 세그멘테이션
	- **프로세스를 논리적 내용(=세그멘트)으로 잘라서 메모리에 배치!**
		1. cf. **페이지** 는 일정크기로 자른다(모두 같은 크기로)
		2. 프로세스는 세그멘트의 집합
		3. **세그멘트의 크기** 는 일반적으로 같지 않다

	- 세그멘트를 메모리에 할당
		1. MMU 내의 재배치 레지스터 값을 바꿈으로서
		2. **CPU는 프로세스가 연속된 메모리 공간에 위치한다고 착각**
		3. MMU는 세그멘트 테이블이 된다

* 주소 변환
	- 논리주소
		1. CPU가 내는 주소는 Segment 번호(s)+변위(d)

	- 주소변환 : 논리주소 -> 물리주소
		1. 세그멘트 테이블 내용 : base와 limit로 구성
		2. 세그멘트 번호(s)는 세그멘트 테이블 인덱스값
		3. s에 해당되는 테이블 내용으로 시작 위치 및 한계값 파악
		4. 한계(limit)를 넘어서면 segment violation 예외 상황 처리
		5. 물리주소 = base[s]+d

	- 예제
		Limit			Base
		1000			1400
		400				6300
		400				4300
		1100			3200
		1000			4700

		1. 논리주소(2, 100)는 물리주소 무엇인가?
			base[2] = 4300, d = 100
			d는 limit보다 작으므로 가능
			4300+100=4400

		2. 논리주소(1, 500)은 물리주소 무엇인가?
			base[1] = 6300, d = 500
			d는 limit보다 크므로 segment violation 예외 상황 발생

* 보호와 공유
	- 보호: 해킹 등 방지
		1. 모든 주소는 세그멘트 테이블을 경유하므로,
		2. 세그멘트 데이블 엔트리마다 r,w,x 비트를 두어
		3. 해당 세그멘트에 대한 접근 제어 가능
		4. **페이징보다 우월!** 내용별로 자르므로 잘 구분되므로

	- 공유: 메모리 낭비 방지
		1. 같은 프로그램을 쓰는 복수 개의 프로세스가 있다면(워드 프로세서 창 3개 띄운경우),
		2. Code+data+stack에서 code는 공유 가능(non-self-modifying code=reentrance code=pure code인 경우=실행 중에 변경되지 않는 코드)
		3. 프로세스의 페이지 테이블 code 영역이 같은 곳을 가리키게 한다
		4. **페이징보다 우월!** 내용별로 자르므로 잘 구분되므로

* 외부단편화
	- 외부단편화
		1. 세그멘트 크기는 고정이 아니라 가변적
		2. 크기가 다른 각 세그멘트를 메모리에 두려면 = 동적 메모리 할당
		3. First, Best, Worst fit, compaction 등 문제
		4. 세그멘트는 외부단편화 발생

	- 세그멘테이션+페이징
		1. 세그멘테이션은 보호와 공유면에서 효과적
		2. 페이징은 외부 단편화 문제를 해결
		3. 따라서 세그멘트를 페이징하자 => Paged segmentation


---


# 17. 가상 메모리
* 가상 메모리
	- 물리 메모리 크기 한계 극복
		1. 물리 메모리보다 큰 프로세스를 실행?
		2. 100MB 메인 메모리에서 200MB 크기의 프로세스 실행

	- 어떻게?
		1. 프로세스 이미지를 모두 메모리에 올릴 필요는 없다
		2. 현재 실행에 필요한 부분만 메모리에 올린다
		3. 오류 처리 제외, 배열 일부 제외, 워드프로세스에서 정렬, 표 기능 제외 =>동적 적재와 비슷한 개념

* 요구 페이징
	- Demand Paging
		1. 프로세스 이미지는 backing store에 저장
		2. 프로세스는 페이지의 집합
		3. 지금 필요한 페이지만 메모리에 올린다

	- 하드웨어 지원
		1. valid 비트 추가된 페이지 테이블(아직 메모리에 올라가지 않은 페이지를 구분하는 비트)
		2. backing store(=swap device)

* Page Fault
	- 페이지 결함(페이지 부재)
		1. 접근하려는 페이지가 메모리에 없다(invalid)
		2. cpu로 인터럽트 신호가 전송
		3. o/s의 인터럽트 처리 루틴으로 접근
		4. Backing store에서 해당 페이지를 메모리로 가져온다
		5. 페이지 테이블에 메모리 주소를 적고 valid 비트를 1로 변경

	- Steps in handling a page fault

	- pure demand paging : 정말 필요한 페이지만 메모리에 올린다
		1. 처음부터 페이지 결함이 일어나서(처음에는 메모리에 아무것도 올라가지 않은 상태라서) 속도가 느리다
		2. 메모리가 절약된다
	- prepaging : 필요할 것이라고 예측되는 페이지를 미리 올린다
		1. 메모리는 낭비
		2. 페이지 결함이 감소하여 속도가 빠르다

	- swapping : 프로세스 단위로 메모리와 backing store 사이를 이동
	- demand paging : 페이지 단위로 메모리와 backing store 사이를 이동

* 유효 접근 시간
	- Effective Access Timer
		1. p : 페이지 부재가 일어날 확률
		2. Teff = (1-p)Tm + pTp      Tm: 메모리를 읽는 시간   Tp: 페이지 부재에 걸리는 시간

	- 예제
		1. Tm = 200nsec(DRAM)
		2. Tp = 8 msec(seek time + rotational delay + transfer time)
		3. Teff = (1-p)* 200 + p * 8,000,000 = 200 + 7,999,800 * p
		4. p = 1/1000이라면 Teff = 8.2usec(40배 느림)
		5. p = 1/399,990이라면 Teff = 220nsec(10% 느림)
		6. p가 낮아야 성능에 지장이 없다

* 지역성의 원리
	- Locality of reference
		1. 메모리 접근은 시간적, 공간적 지역성을 가진다
		2. 실제 페이지 부재 확률은 매우 낮다

	- 다른 방법
		1. HDD는 접근 시간이 너무 길다
		2. swap device로 부적합
		3. SSD사용


---


### 18. 페이지 교체
* Demand paging
	- 요구되어지는 페이지만 backing store에서 가져온다
	- 프로그램 실행이 계속됨에 따라 요구 페이지가 늘어나고
	- 언젠가는 메모리가 가득 차게 된다

* Memory full!
	- 메모리가 가득 차면 추가로 페이지를 가져오기 위해
	- 어떤 페이지는 backing store로 몰아내고(page-out)
	- 그 빈 공간으로 페이지를 가져온다(page-in)
	- 용어 : **victim page**

* Victim Page
	- 어느 페이지를 몰아낼 것인가?
		1. 기왕이면 modify 되지 않은 페이지를 victim으로 선택(modify 된 페이지는 backing store에 수정해주는 시간이 필요하기 때문에)
		2. 방법: 페이지 테이블에 **modified bit(=dirty bit)** 추가

	- 여러 페이지 중에서 무엇을 victim으로?
		1. Ramdom
		2. First-in First-out(FIFO)
		3. 그외
		4. 용어: page replacement algorithms

* 페이지 교체 알고리즘
	- Page reference string
		1. CPU가 내는 주소 : 100 101 102 432 612 103 104 611 612
		2. Page size = 100 바이트라면
		3. 페이지 번호 = 1(1페이지이고 오프셋 0) 1(1페이지이고 오프셋1) 1 4 6 1 1 6 6
		4. Page reference string = 1 4 6 1 6 (연속되는 페이지는 페이지 부재가 일어나지 않으므로 생략)
