---
layout: post
title:  "Unity Math"
date:   2019-02-10 15:30:02 +0900
---

### 1. 삼각함수
* 1.1 삼각형
	- 삼각형은 세 개의 **정점(Vertex)**으로 이루어짐
	- 정점으로 세 개의 **변(Edge)**이 정해짐
	- 삼각형의 세 변 중 두 개의 변이 이루는 각을 **내각(Interior angle)**이라함
	- 삼각형은 항상 어딘가의 **평면 위에 존재**

* 1.2 직각삼각형
	- 삼각함수에서 주로 다루는 삼각형은 **직각삼각형(Right triangle)**
	- 직각삼각형은 세 개의 정점 부분의 내각 중 하나가 직각을 이룸
	- 직각의 맞은편의 비스듬한 변을 **빗변(Hypotenuse)**, 바닥에 있는 것을 **밑변(Adjacent)**, 남은 변을 **높이(Opposite)**
	- 직각삼각형의 세 변의 길이와, 빗변과 밑변이 이루는 내각의 각도 Θ 사이에 존재하는 관계를 이용

* 1.3 피타고라스의 정리
	- 빗변의 길이를 h, 밑변의 길이를 a, 높이의 길이를 o으로 했을 때, **h^2 = a^2 + o^2** 가 성립
	- 피타고라스의 정리를 이용하면, 세 변 중 두 변의 길이를 알 수 있는 경우 남은 변의 길이를 구할 수 있음

* 1.4 사인, 코사인, 탄젠트
	- 직각삼각형에서 변을 두 개 선택한 경우 **두 변의 길이의 비율(삼각비)은 Θ의 각도에 따라 변화**
	- 변화하는 매개변수 Θ를 입력받아, 출력되는 결괏값으로 각 변수 사이의 관계를 나타낼 수 있음
	- 사인(정현, sine) : **sinΘ = 높이 / 빗변**
	- sinΘ는 각도가 Θ일 때 **빗변과 높이의 비율**
	- 코사인(여현, cosine) : **cosΘ = 밑변 / 빗변**
	- cosΘ는 각도가 Θ일 때 **빗변과 밑변의 비율**
	- 탄젠트(정접, tangent) : **tanΘ = 높이 / 밑변**
	- 또한, 내각 Θ를 매개변수로 받아 각 변끼리의 비율을 반환하는 사인, 코사인, 탄젠트에 대응해 그 역함수(inverse function)로서 **각 변끼리의 비율을 매개변수**로 하여 내각 Θ의 각도를 구하는 함수도 존재
	- 아크사인, 아크코사인, 아크탄젠트를 사용하면 각각 사인, 코사인, 탄젠트 값으로부터 대응하는 각도 Θ를 구할수 있음
	- **Θ = arcsin(sinΘ), Θ = arccos(cosΘ), Θ = arctan(tanΘ)**
	- 다시 말해, 삼각형의 세 변 중 두 변의 길이를 알 때 이 역함수들을 적용하면 내각 Θ의 각도를 구할 수 있음

* 1.5 삼각함수의 주기성
	- 1.5.1 단위원
		1. 앞에서 삼각함수는 변화하는 매개변수 Θ에 의존하는 함수라 설명
		2. 지금까지는 Θ가 0도보다 크고 90도보다 작은 각도로 한정한 직각삼각형에서만 삼각함수의 개념을 설명함
		3. 이번에는 직각삼각형뿐만 아니라, **직각삼각형을 포함하는 원을 통해 삼각함수를 표현하는 방법을 소개**
		4. 반지름의 길이가 1인 원, 즉 **단위원(unit circle)**안에 직각삼각형 ABC를 그림
		5. Θ의 각도를 변동한 경우, 빗변의 길이는 항상 1이므로, 좌표축에서 **좌표는 (cosΘ, sinΘ)** 이 됨
		6. 삼각형 ABC에 피타고라스의 정리를 적용하면 **(sinΘ)^2 + (cosΘ)^2 = 1** 을 도출

	- 1.5.2 코사인법칙
		1. 직각삼각형이 아닌 일반 삼각형에 성립되는 성질에 대해 학습
		2. 세 변의 길이가 각각 a, b, c이고 b와 c의 내각이 Θ인 삼각형을 그림
		3. a^2 = (b-c*cosΘ)^2 + (c*sinΘ)^2
		4.     = b^2 -2bc*cosΘ + c^2*(cosΘ)^2 + c^2*(sinΘ)^2
		5.     = b^2 -2bc*cosΘ + ((cosΘ)^2 + (sinΘ)^2) * c^2
		6.     = b^2 + c^2 -2bc*cosΘ
		7. 이렇게 구한 식을 **코사인 법칙(Law of cosines)**이라고 부름
		8. 코사인법칙은 직각삼각형뿐만 아니라 일반 삼각형에도 성립하는 성질
		9. 피타고라스의 정리는 코사인법칙의 특수한 경우(Θ가 직각인 경우)

	- 1.5.3 주기성
		1. 단위원을 사용하면 원점을 축으로 원의 반지름을 회전시킴으로써 90도보다 큰 각도에서 삼각함수의 수치를 표현 가능
		2. Θ가 360도 이상일 때는 다시 0도로 돌아온 듯 움직이고, 그 동작을 **360도마다 계속 반복**한다. 이것을 삼각함수의 주기성이라 함

	- 1.5.4 라디안
		1. 단위원의 점 D: (1, 0)에서부터 단위원의 원호에서 길이 1만큼 이동한 점을 P라고 함
		2. 반지름과 호의 길이가 같아진 상태의 P에서 이때 Θ의 각도를 **1라디안**이라고 함(단위 생략가능)
		3. 왜 90도가 라디안으로 하면 π/2로 표현되고, 180도가 π로 표현되는 것인가?
		4. π가 원주율로 불리며, 원주의 길이를 계산할 때 상수로 이용되는 것을 떠올려보자
		5. 원주의 길이를 C, 반지름의 길이를 r이라고 했을 때 원주의 길이 C를 구하는 공식은 **C = 2πr**
		6. 단위원으 원주는 C = 2π
		7. P가 원주 위를 이동한 원호의 길이가 1일 때 Θ의 각도를 1라디안이라고 했음
		8. Θ가 360도일 때 P는 원호의 길이가 2π인 위치에 있음. 이때의 Θ의 각도는 2π라디안과 같음

	- 1.5.5 덧셈정리
		1. 단위원에서, 내각 α 위치에 있는 점 P(cosα, sinα)를 β만큼 회전 이동한 점의 좌표가 P'(cos(α+β), sin(α+β))라는 것을 알 수 있음
		2. **덧셈정리(Addition theorem)**을 통해 cos(α+β), sin(α+β)를 구할 수 있음
		3. sin(α+β) = sinα * cosβ + cosα * sin β (신코픈 꽃신)
		4. sin(α-β) = sinα * cosβ - cosα * sin β
		5. cos(α+β) = cosα * cosβ - sinα * sin β (고구마 사소)
		6. cos(α-β) = cosα * cosβ + sinα * sin β
		7. 이 식은 좌표의 임의의 점(x, y)에 대한 원점 중심의 회전 알고리즘으로 사용 가능

	- 1.5.6 사인파, 코사인파
		1. 함수의 변화량을 살피는 그래프 표현으로 삼각함수를 생각
		2. Θ의 라디안을 가로축으로 사인, 코사인 값을 세로축으로 하는 그래프를 만듬
		3. 일반적으로 상수 P에 대해서 **f(x + P) = f(x)**가 성립하는 함수를 주기함수라 함
		4. 사인에 대해서는 sin(x + 2π) = sin(x) 가 성립
		5. sin(x)는 완만한 호를 그리는 파형을 반복하는데 이 파형을 **사인파**라고 함
		6. **주파수**는 주기의 역수
		
---

### 2. 좌표계
* 2.1 직교좌표계
	- 2.1.1 2D 좌표계
		1. 좌표계(Coordinate system)는 물체의 위치를 **특정한 하나의 점으로 유일하게** 가리키기 위한 체계
		2. **직각으로 교차**하는 x축과 y축으로 이루어진 좌표계를 직교좌표계(Orthogonal coordinate system)라고 함
		3. 축이 직각으로 교차하지 않는 것은 사교좌표계(Oblique coordinate system)
		4. 직교좌표계를 사용하면 2차원 평면상의 위치를 유일하게 지정할 수 있으므로 2D 게임의 모든 장면에서 쓰인다

	- 2.1.2 3D 좌표계
		1. **x축, y축, z축 세 개의 직각으로 교차하는 축**을 사용하면 (x, y, z)라는 세 개의 값으로 3D 공간 내의 특정 위치를 지정 가능

	- 2.1.3 왼손 좌표계와 오른손 좌표계
		1. 유니티가 채용한 z 방향의 좌표계를 가리켜 왼손 좌표계(Left-handed coordinate system)라고 함
		2. 2D 평면을 나타내는 직교좌표계에서 채용한, 오른쪽으로 x축, 위쪽으로 y축인 위치 관계의 좌표계를 기준으로
		3. **원점에서 안쪽으로 향해 깊이로서 z축이 증가하는 것이 왼손 좌표계**
		4. OpenGL, OpenGL, WebGL에서는 오른손 좌표계를 사용
		5. 한편, DirectX에서는 왼손 좌표계를 사용
		6. Unreal은 왼손 좌표계 사용

	- 2.1.4 로컬 좌표계와 월드 좌표계
		1. 로컬 공간 : 한 오브젝트 주변에만 존재하는 오브젝트 고유의 공간
		2. 로컬 좌표 : 오브젝트의 위치를 중심으로 하는 좌표계
		3. 월드 공간 : 모든 물체를 포함하는 공간
		4. 월드 좌표 : 월드 공간에서의 절대 위치를 나타내느 좌표계
		5. 로컬 좌표계는 각 물체 내부의 상대 좌표에 불과하므로, 다른 물체와의 상호 관계를 파악하는데 활용불가
		6. 서로 비교하려면 단 하나만 존재하는 월드 좌표계상에서 양쪽 모두 월드 좌표로 변환해야만 비교 가능
		
	- 2.1.6 스크린 좌표
		1. 유니티에는 **스크린 공간**이 존재
		2. 그 공간을 위한 **스크린 좌표계**도 존재
		3. 스크린 좌표계는 **화면 왼쪽 아래를 원점**으로, 화면 해상도에 따른 **픽셀 위치를 단위로** 하는 2D 직교좌표계
		4. 유니티에는 스크린 좌표를 정규화한 좌표로 **뷰포트 좌표**가 존재
		5. 뷰포트 좌표에서는 화면 해상도에 관계없이 항상 왼쪽 아래가 (0, 0)이고 오른쪽 위가 (1, 1)
		6. 뷰포트 좌표를 사용하면 어떤 물체가 화면 안에 들어오는지 화면 해상도에 관계없이 쉽게 판정 가능

* 2.2 극좌표계(Polor coordinate system)
	- 2.2.1 2D 극좌표계
		1. 2D 직교좌표계에 원점이 있듯 2D 극좌표계에도 **극(Pole)**이라는 기준점이 존재
		2. 직교좌표계에서 원점에서 가로 방향으로 x축이 뻗어가듯 극에서는 **극축**이라 불리는 반직선이 뻗어나옴
		3. 극좌표계에서 평면상의 점 P의 위치를 결정하는 것은 극축과 P를 연결하는 직선 r의 길이와,
		4. 극축과 r이 이루는 각도 Θ이다. 이 두 값으로 P의 **극좌표는 (r, Θ)**로 지정
		5. 2D 극좌표 (r, Θ)는 2D 직교좌표 (rcosΘ, rsinΘ)와 같음

	- 2.2.2 3D 극좌표계(구면좌표계)
		1. 극좌표에서도 축을 하나 더 추가하면 3D 극좌표계를 정의할 수 있음
		2. 3D 극좌표계에서는 또 하나의 축과 이루는 각도를 추가하여 세 개의 값으로 좌표를 정의
		3. 구면좌표계의 좌표는 관례적으로, 반지름의 길이 r과, 2가지 축의 양의 방향으로부터의 각도 Θ와 ɸ의 3가지 수치의 조합 **(r, Θ, ɸ)**로 표현
		4. 구면좌표계는 2D 극좌표계에 축을 하나 더했을뿐이므로, 2D 극좌표계처럼 삼각함수를 사용해서 3D 직교좌표계와 서로 변환할 수 있음
		5. 구면좌표 P(r, Θ, ɸ)은 직교좌표 (rsinΘcosɸ, rcosΘ, rsinΘsinɸ)와 같음


---

### 3. 벡터
* 3.1 벡터의 정의
	- 3.1.1 수벡터
		1. 유니티에서는 **Vector3**라는 구조체에 좌표를 넣어 위치를 표현
		2. Vecotr3은 이들 세 개의 x, y, z 프로퍼티를 이용해 3차원 공간 안의 점을 표현
		3. 위치로서의 벡터는 **위치 벡터(position vector)**라 부름
		4. x, y, z의 순서를 (x, y, z) 안에서 바꾸면 전혀 다른 좌표가 됨
		5. 이처럼 순서가 있는 수치로 조합된 벡터를 **수벡터(numerical vector)**
		6. Vector2, Vector3가 각각 요소 두개, 세개인 배열이고, 각각 2차원, 3차원 벡터를 표현할 수 있었듯이
		7. n개 요소의 배열로 n차원의 벡터를 표현 가능
		8. 배열로 벡터를 표현한 경우 하나하나의 요소를 벡터의 **성분(Component)**라 함
		
	- 3.1.2 기하벡터
		1. 성분의 배열로 본 벡터 표현과 달리, 화살표를 통해 벡터를 시각적으로 표현 가능
		2. 표현은 **크기(Magnitude)와 방향(Direction)**을 가진 양으로서 벡터를 정의하는 방법
		3. 벡터의 화살표가 시작되는 점을 시점(initial point), 끝 점을 종점(terminal point)
		4. 기하학적 벡터는 좌표계와 관계없이 존재하는데 이런 벡터를 **기하벡터(geometric vector)**라고 함
		5. 좌표계와 원점이 없는 기하벡터가 존재하는 장소를 **아핀 공간(affine space)**라고 함

	- 3.1.3 스칼라
		1. 크기만 있는 일반적인 수치는 보통 **스칼라(Scala)**라고 함

* 3.2 벡터 연산
	- 3.2.1 덧셈, 뺄셈, 교환법칙, 결합법칙
		1. 기하벡터 a, 기하벡터 b 가 있다고 가정
		2. a + b = b + a (**덧셈에 대해 교환법칙 성립**)
		3. a - b != b - a (**뺄셈에 대해 교환법칙 성립불가**)
		4. (a + b) + c = a + (b + c) (**결합법칙 성립**)

	- 3.2.2 스칼라 곱셈, 나눗셈
		1. 벡터의 덧셈, 뺄셈은 벡터끼리 연산했지만,
		2. 벡터에 스칼라를 곱해 스칼라 곱을 구하거나 벡터를 스칼라로 나눌 수 있음
		3. 벡터 a, b와 스칼라 c에 대해 **분배법칙이 성립**
		4. c(a + b) = ca + cb

	- 3.2.3 단위벡터
		1. 지금까지 그림으로 기하벡터의 연산법칙을 확인했지만,
		2. 수벡터에도 같은 연산법칙이 성립
		3. 크기가 1인 벡터는 **단위벡터(unit vector)**라 함
		4. 단위벡터를 구하는 조작을 가리켜 벡터를 **정규화(normalize)**한다고 표현
	
	- 3.2.4 기저와 좌표계
		1. 3D 직교좌표계에서 원점에 해당하는 위치를 시점으로, x축, y축, z축 방향으로 각각 단위벡터 i, j, k가 뻗어 있다고 가정
		2. 이때 해당 좌표계상의 임의의 점을 가리키는 위치벡터 a는 다음과 같은 식으로 나타낼 수 있음
		3. a = ax + ay + az
		4. 여기서 ax, ay, az는 각각 i, j, k를 스칼라양 x, y, z로 곱한 것임
		5. a = xi + yj + zk
		6. 다시 말해 a의 종점 좌표는 (x, y, z)
		7. 이처럼 기하벡터를 이용해도 직교좌표계를 표현할 수 있고, 거꾸로 기하벡터를 좌표의 수벡터로서 나타낼 수 있음
		8. 그렇기 때문에 컴퓨터 상에서 단순한 배열 데이터로 처리할 수 있음
		9. 모두 같은 평면에 있는 벡터들을 **선형종속(Linearly dependent)** 상태라 함
		10. 선형종속이 아닌 상태를 **선형독립(Linearly independent)**
		11. 선형독립이고 좌표계 표현에 사용할 수 있는 벡터를 가리켜 **기저벡터(Basis vector)**라 하고 그 집합을 **기저(basis)**라 부름
	
	- 3.2.5 법선벡터
		1. 법선벡터(normal vector)는 2D인 경우에는 **어떤 벡터에 수직인 벡터**이고, 3D인 경우에는 **어떤 평면에 수직인 벡터**
		2. 법선이라는 개념은 벡터에 국한되지 않고 수직인 직선을 의미
		3. 벡터 v를 그 시점이 속한 면에 수직인 벡터와 그 면상의 벡터로 분해했을 때,
		4. 수직인 벡터를 가리켜 v의 **법선 성분(normal component)**, 면상의 벡터를 v의 **접선성분(tangential component)**라 함
		5. 법선벡터는 **평면을 정의**하는데 사용 가능
		6. 점 P와, P를 시점으로 하는 법선벡터 N이 있을 때, P를 포함하는 평면의 표면이 어느쪽을 향하는지 결정할 수 있음

	- 3.2.7 내적
		1. 내적(dot product, inner product)은 **두 개의 벡터를 하나의 스칼라양으로 변환하는 연산**
		2. 벡터 자신의 내적은 해당 벡터 크기를 제곱한 스칼라양과 같다고 가정
		3. a • a = ||a||^2
		4. 삼각형의 내각 Θ를 이루는 두 변에 해당하는 벡터를 각각 a, b라 하고, 나머지 한 변을 벡터 c라고 하자
		5. c = a - b 식 성립
		6. **내적에서 분배, 교환법칙이 성립한다고 가정**
		7. c • c = (a - b) • (a - b)
		8. 		 = a • (a - b) - b • (a - b)
		9. 		 = a•a - a•b - b•a + b•b
		10. 	 = a•a + b•b - 2a•b
		11.      = ||a||^2 + ||b||^2 - 2a•b
		12. c • c = ||c||^2 이므로
		13. ||c||^2 = ||a||^2 + ||b||^2 - 2a•b
		14. 한편, 1장에서 학습한 코사인법칙을 이 삼각형에 적용
		15. ||c||^2 = ||a||^2 + ||b||^2 - 2||a|| ||b|| cosΘ
		16. 그럼 아래와 같은 식이 성립
		17. ||a||^2 + ||b||^2 - 2a•b = ||a||^2 + ||b||^2 - 2||a|| ||b|| cosΘ
		18. **a•b = ||a|| ||b|| cosΘ**
		19. 3D 벡터라면 (ax, ay, az)와 (bx, by, bz)에 대해 다음처럼 내적의 성분표시를 얻을 수 있음
		20. **a•b = axbx + ayby + azbz**
		21. 사인과 코사인으로 대표되는 초월함수라 불리는 종류의 함수는 일반적으로 컴퓨터상에서 처리비용이 비싸므로
		22. 내적을 계산으로 구할 때는 가능한 한 성분표시를 사용한다
		23. 결합법칙은 성립하지 않음

	- 3.2.8 벡터의 직교투영
		1. 내적을 이용하여 **벡터의 직교투영**을 구할 수 있음
		2. 직교투영이란 빛이 닿았을 때 생기는 그림자 형태
		3. 벡터 a의 종점에서 벡터 b를 향해 수직으로 내린 선과 b가 교차하는 점에서부터 b의 시점까지의 길이는 ||a|| cosΘ
		4. a • b = ||a|| ||b|| cosΘ라는 사실을 떠올리면
		5. b가 단위벡터라 가정하면  a • b = ||a|| cosΘ로 나타낼 수 있음
		6. 결론적으로 a에서 b로 **직교투영한 길이**는 a와 단위벡터 b의 내적으로 구할 수 있음
		7. 또한, **a를 b로 직교투영한 길이를 크기로 가지는 벡터 b'**는 b가 단위벡터일 때 다음과 같다
		8. b' = (a • b)b

	- 3.2.9 내적의 응용
		1. 벡터 a와 b의 내적은 a와 b가 이루는 각 Θ를 변화시킴으로써 바뀌는 cosΘ에 따라 변함
		2. 이 점을 이용하여 단순한 방법으로 a와 b의 관계를 파악할 수 있음
		3. a와 b의 길이의 곱과 a와 b의 내적을 비교함으로써 두 벡터의 위치 관계를 조사할 수 있음
		4. a와 b가 완전히 같은 방향일 경우 : a • b = ||a|| ||b|| (cos0 = 1이므로)
		5. Θ가 90도보다 작을 경우 : a • b < ||a|| ||b||
		6. a와 b가 수직일 경우 : a • b = 0
		7. Θ가 90도와 180도 사이일 경우 : a • b < 0, |a • b| < ||a|| ||b||
		8. a와 b가 반대방향일 경우 : a • b = -||a|| ||b||

	- 3.2.10 외적
		1. 외적(cross product)은 두 개의 벡터에서 한 개의 스칼라를 생성하는 내적과 달리, **두 개의 벡터에서 새로운 한 개의 벡터를 생성**
		2. 외적은 내적과 달리 2차원 벡터끼리의 외적은 없고 3차원 이상의 벡터가 아니면 외적을 정의할 수 없음
		3. 외적으로 생성되는 벡터는 두 개의 벡터 a, b에 수직이고, a, b로 이루어지는 평행사변형의 면적과 크기가 같음
		4. a X b = (||a|| ||b|| sinΘ) u  (u는 a, b에 수직인 단위벡터)
		5. ||a X b|| = ||a|| ||b|| sinΘ
		6. 외적은 교환법칙이 성립하지 않음
		7. 외적에 의해 생성되는 벡터는 좌표계에 따라 방향이 바뀌므로 **유사벡터**이다
	
	- 3.2.11 외적의 응용
		1. 외적의 크기는 0도와 180도에 0이 됨
		2. 따라서 외적의 크기는 **평행 판정**에 사용할 수 있음
		3. 외적에 관한 가장 직접적인 사용법은 **평면의 법선벡터**를 구하는 것
		4. 