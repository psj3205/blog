---
layout: post
title:  "DB 정리"
date:   2018-10-24 18:19:02 +0900
---

### 1. 데이터베이스가 없으면 무엇이 곤란한가?
* a
	- a


---


### 2. 인덱스로 고속 액세스 실현하기
* 2.1 키와 값의 페어를 관리하고 싶다
	- 전체 검색은 대량의 데이터에 적합하지 않다
		1. 사용자 정보를 텍스트 파일로 관리하는 경우를 가정
		2. 사용자의 정보를 파일의 어디에 있는지 탐색하기 위해서는 처음부터 찾을 때까지 검색해야 한다
		3. 단순한 텍스트 파일은 전부를 읽어 보는 방법으로밖에 검색이 불가능
		4. 검색에 걸리는 시간은 문서의 크기에 비례, O(N)의 계산량

	- 원하는 위치까지 순식간에 도달하는 방법 생각하기
		1. 사용자의 정보를 **고정길이** 로 관리하는 기술을 가정
		2. 사용자 정보를 반드시 100바이트로 관리하면 **"사용자 ID * 100바이트"** 가 사용자 정보를 저장하는 시작위치이다
		3. 파일 위치가 기계적으로 단순히 정해지기 때문에 바로 목표로 하는 데이터에 접근 가능
		4. 하지만 불필요하게 소비되는 공간이 너무 많아진다

	- 인덱스 구조 도입하기
		1. 고정 길이 방식으로 데이터를 관리하는 것은 실용성이 부족
		2. 책의 색인과 같이 별도로 각각의 사용자 ID마다 파일 상의 시작 위치를 기록한 파일을 만들어 고속으로 사용자 정보를 찾는다
		3. 이것이 **인덱스** 라는 구조
		4. 인덱스 파일은 키 값, 바이트 위치가 구성 요소가 되므로 고정 길이 방식의 포맷을 취할 수 있어 빠르게 값을 얻을 수 있다
		5. 예를 들어 사용자 ID가 1,234,567인 경우, 1,234,567 * 8바이트째를 읽으면 본체 파일의 몇 번째 바이트에 원하는 데이터가 있는지 확인가능
		6. 그리고 다음은 본체인 사용자 정보 관리 파일을 읽어서 원하는 사용자 정보를 얻는다
		7. 인덱스 자체는 본체의 데이터와 별도로 관리하기 때문에 인덱스를 별도로 업데이트 해야 한다
		8. 따라서 데이터 업데이트 비용은 증가하지만, 대신 검색를 극적으로 고속화할 수 있다

	- 해시 인덱스
		1. 실제 데이터베이스의 구현은 키 값을 그대로 관리하는 것이 아니라 키 값을 해시 함수에 대입하여 해시 값과 값의 쌍을 갖는 구조로 사용
		2. 이러한 인덱스를 **해시 인덱스** 라 한다
		3. 해시 값은 문자열 길이에 상관없이 동일한 크기이므로 고정 길이 포맷 가능
		4. 해시 계산 비용은 데이터의 양에 의존하지 않기 때문에 계산량은 O(1)이다
		5. 하지만 해시 인덱스는 만능이 아니다
			- 해시 인덱스는 지정한 키 값과 같은 것밖에 찾을 수 없기 때문에 범위가 있는 검색은 불가능하다
			- 정렬을하여 순서에 따라 결과를 반호나하는 경우에도 해시 인덱스는 부적절하다

* 2.2 인덱스의 기본 B+Tree 인덱스
	- B+Tree 인덱스란?
		1. 트리 구조로 된 인덱스이다
		2. 정상이 루트블록, 최하층이 리프블록, 사이의 블록이 브랜치블록이다
		3. 루트블록과 브랜치블록은 검색의 키인 사용자 ID에 대해 해당 블록이 어디에 있는지에 대한 정보를 가지고 있다
		4. 인덱스 검색 시 루트->브랜치->리프 순으로 접근
		5. 해시 인덱스에 비해 액세스 횟수가 늘어나지만 충분히 효과가 있는 방식(루트 1회, 브랜치 1회, 리프 1회, 실제 데이터 1회 총 4회)

	- 다분기 트리와 이진 트리
		1. 브랜치 및 리프의 분기 개수가 두 개밖에 없는 것을 이진 트리라고 한다
		2. B+Tree는 다분기 트리라고 부른다
		3. 분기 개수를 많이 하는 이유는 계층의 단수를 줄여서 액세스 횟수를 적게 하기 위함이다
		4. 이진 트리의 경우 레코드 수 N당 탐색에 필요한 계산량이 O(log2N)
		5. B+Tree와 같은 다분기트리 구성을 취함으로써 O(logmN)의 계산량이 되어 액세스 수를 크게 줄일 수 있다

	- B+Tree와 B-Tree
		1. B-Tree는 모든 값을 리프 블록에서만 갖도록 제한하지 않으며, 브랜치에서도 값을 가질 수 있는 구조이다
		2. B+Tree는 어떠한 검색이라 할지라도 루트에서 리프까지 거치지 않으면 열의 값을 검색할 수 없는 단점이 있다
		3. 그러나 브랜치가 보다 컴팩트하게 되므로 인덱스 자체의 계층 구조를 작게 할 수 있는 장점이 있다. 즉, 최악의 경우 액세스 횟수를 줄일 수 있다는 의미
		4. B+Tree 인덱스는 RDBMS의 사실상 표준으로 사용

* 2.3 RDBMS에서는 어떻게 최적화를 실현하고 있는가?
	- 고유성의 보장
		1. 데이터 관리의 상황에서 그 정보가 단지 하나만 있는 것을 보증하고 싶다는 경우
		2. 인덱스는 고유성을 보증하는 목적으로 사용 가능
		3. 해시 인덱스라면 동일한 ID인 경우 반드시 동일한 해시값이 되고 B+Tree 인덱스이면 동일 리프 블록에 도달하기 때문에 적은 비용으로 쉽게 중복 체크를 할 수 있다
		4. 고유성이 보장된 인덱스를 고유 인덱스, 보장되지 않은 인덱스를 비고유 인덱스라고 한다

	- 멀티 칼럼 인덱스
		1. 인덱스를 검색하는 데 있어 지정하고 싶은 조건이 한 개라고만은 할 수 없다
		2. 이러한 여러 조건의 인덱스를 멀티 칼럼 인덱스라고 한다

	- 인덱스만을 읽는 검색
		1. 앞의 방식은 인덱스와 데이터의 두 번에 걸친 로딩 작업이 필요했다
		2. 하지만 검색 패턴에 따라 인덱스를 읽는 것만으로 처리가 완결되는 겅우도 있다
		3. 이러한 작업을 Index only read 또는 Covering Index라고 부른다

	- 인덱스 병합
		1. 부서 코드가 100번 또는 입사 연도가 2010년인 직원을 찾고 싶다라는 경우
		2. 한 번의 검색에서 두 개 이상의 인덱스를 동시에 사용하여 각각의 결과에서 원하는 레코드를 추출
		3. 이러한 기능을 인덱스 병합이라고 한다

* 2.4 업데이트 비용 절감을 위한 노력
	- 디스크에 모아서 기록하기
		1. 인덱스는 본체 데이터와 별도로 유지할 필요가 있기 때문에 검색 성능이 높아지는 대가로 업데이트 성능이 떨어지는 단점이 있다
		2. 업데이트 비용을 절감하기 위한 몇가지 방법이 있다
		3. 여기서는 B+Tree 인덱스를 예로 몇 가지 포인트를 소개
		4. 레코드를 추가 등록하는 경우에는 B+Tree 인덱스에도 값을 등록해야 한다
		5. 데이터베이스에서는 무정지성을 높이기 위해 업데이트된 부분을 최대한 빨리 디스크에 저장해야 한다
		6. 전통적인 방식으로 구현하자면 업데이트된 순서대로 디스크에 써 나갈 것이다.
		7. 그러나 이런 식이면 속도가 느린 랜덤 라이트가 많이 발생
		9. 업데이트된 정보를 메모리나 전용 파일 등에 일시적으로 기록하고 나중에 모아서 단번에 리프 블록을 갱신하는 구조를 채택하는 데이터베이스가 바로 MySQL이다
		10. 이러한 구조에서는 랜덤 라이트보다 훨씬 빠른 시퀀셜 라이트로 빠르게 처리한다

	- 병렬 갱신 성능 높이기
		1. B+Tree 인덱스에 값의 추가/갱신/삭제를 할 경우, 인덱스의 리프 블록의 내용을 이동시킬 필요가 있다. 이러한 처리를 리프 분할이라고 한다
		2. 여러 클라이언트에서 일제히 업데이트가 발생하여 리프 분할이 여기저기에서 일어난 경우, 일관성을 갖는 것은 상당히 어렵다
		3. MySQL 등에서는 인덱스의 재편성 처리가 완료될 때까지 일체의 참조/갱신 처리를 차단하는 동작을 시행한다
		4. 멀티코어 CPU 환경의 대두로 이러한 병렬 갱신 성는의 중요성이 높아졌다
		5. B+Tree 인덱스에는 락 프리로 갱신 가능하게 하는 알고리즘도 제안되어 차세대 데이터베이스에서는 이러한 알고리즘이 사용될 것이다
		6. 현재 MySQL에서 이것을 해결하는 가장 빠른 방법은 파티션 테이블을 사용하는 것
		7. 파티션 테이블은 내부적으로 테이블을 복수로 분할 관리하는 것이다. 따라서 인덱스도 복수로 구분하기 때문에 병렬 갱신이 가능
